{"id":906,"date":"2022-10-26T15:18:12","date_gmt":"2022-10-26T09:48:12","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=906"},"modified":"2022-10-27T13:11:46","modified_gmt":"2022-10-27T07:41:46","slug":"hosting-net-6-web-api-with-aws-lambda-truly-server-less-rest-apis","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet\/hosting-net-6-web-api-with-aws-lambda-truly-server-less-rest-apis\/","title":{"rendered":"Hosting .NET 6 Web API with AWS Lambda \u2013 Truly Server less REST APIs"},"content":{"rendered":"\n<p>In this article, we will learn about hosting ASP.NET Core Web API with AWS Lambda in a rather simple-to-follow manner. It is going to be as simple as developing a .NET 6 Web API as you would normally do using Controllers or Minimal APIs, and running some CLI commands which will deploy your API as Lambda Function to AWS Lambda super fast!<\/p>\n\n\n\n<p>As part of the \u201c<strong>Server less Applications with AWS on .NET<\/strong>\u201d series, in earlier articles, we learned about hosting&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/codewithmukesh.com\/blog\/aws-lambda-with-net-6\/\" target=\"_blank\">AWS Lambdas<\/a>&nbsp;and exposing them via&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/codewithmukesh.com\/blog\/amazon-api-gateway-with-dotnet\/\" target=\"_blank\">Amazon API Gateways<\/a>&nbsp;to achieve the same. With this article, we will be learning a simple way to get your ASP.NET Core Web API Hosted onto the AWS Infrastructure with AWS Lambda! In other words, we will be building a server less REST API with .NET 6 and deploying it to the AWS Infrastructure using AWS Lambdas.<\/p>\n\n\n\n<h2>When to Host ASP.NET Core Web API with AWS Lambda?<\/h2>\n\n\n\n<p>Choosing when and where to use what kind of Hosting Strategies is vital for your business and customer needs. This can also be the break or make decision in saving costs of your AWS services. Now that we understand the pros and cons of hosting web APIs into AWS Lambdas, let\u2019s understand when to use this approach and when not to.<\/p>\n\n\n\n<p>Hosting ASP.NET Core Web API is pretty cool for building a Web API that is not very crucial or not called very often. Always keep in mind that the response time of APIs hosted over AWS Lambda can be a bit longer, with the cold starts adding at least 1-2 additional seconds to the overall response times. Being serverless, it costs nothing when there are no incoming requests, and also it costs close to nothing even when there are requests coming in, thanks to the generous Free Tier of AWS!<\/p>\n\n\n\n<p>The Free Tier provides you 1 Million free requests per month for AWS Lambda, forever! And after 1 Million Lambda requests per month, you will be charged like 0.20 USD for the next 1 Million requests, which is again very affordable! And if your application is hitting 1 Million requests a month, you would probably be running a pretty successful business as well.<\/p>\n\n\n\n<p>And, as mentioned in the previous section, if you plan to deploy a complicated, large-scale .NET Web API to AWS Lambda, it\u2019s probably not a good idea. A better approach would be to Dockerize the application and run it over AWS App Runner, ECS, EC2 or even deploy it into an Elastic Kubernetes Cluster of Amazon! As you see, the options you get while hosting ASP.NET Core to the AWS Infrastructure are pretty deep, and solely depend on the use case and purpose of your application! Let me know in the comments section below if you want me to write articles related to the other approaches to deploying an ASP.NET Core Web API to the AWS Infrastructure.<\/p>\n\n\n\n<p>Also, if your application endpoints have long-running tasks, AWS Lambdas won\u2019t be a recommended approach. Try to keep your task run times to well under 5 mins of execution time, as this can also contribute to the AWS Lambda costs. There is also a 1000 concurrent execution limit for the Lambda.<\/p>\n\n\n\n<p>Thus, it\u2019s pretty much clear that it\u2019s not a very good idea to try to host complex applications into AWS Lambda. If you have a simple to medium Web API that maybe does some CRUD functionalities and connects to a few other simple AWS Services like DynamoDB, Cloudwatch, Kinesis, and S3, this approach will do wonders for you and incredibly optimize your AWS running costs.<\/p>\n\n\n\n<p>Let\u2019s get into the implementation and explore a couple of cool ways of hosting ASP.NET Core Web API with AWS Lambda! I assure you that you are going to learn a lot from this article. Leave a comment if you did.<\/p>\n\n\n\n<h2>Prerequisites<\/h2>\n\n\n\n<p>You will need the following for this implementation.<\/p>\n\n\n\n<ul><li>Visual Studio 2022 or other IDEs installed. I will be demonstrating this with VS 2022 Community Edition.<\/li><li>.NET6 SDK installed on your development machine.<\/li><li>AWS Account. A Free account is more than enough.<\/li><li>AWS CLI configured. You can&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/codewithmukesh.com\/blog\/aws-lambda-with-net-6\/#Access_Keys_and_Profiles_-_Local_AWS_CLI_Setup\" target=\"_blank\">follow the steps from here<\/a>.<\/li><li>AWS Tools and toolkit installed. You can install this as an extension from the Visual Studio Extensions.&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/codewithmukesh.com\/blog\/aws-lambda-with-net-6\/#AWS_Lambda_with_NET_6\" target=\"_blank\">Refer to steps from here<\/a>.<\/li><\/ul>\n\n\n\n<h2>Hosting ASP.NET Core Web API with AWS Lambda \u2013 Getting Started<\/h2>\n\n\n\n<p>First up, let\u2019s build an ASP.NET Core Web API with Visual Studio using the default .NET templates, add in some changes to give it a Lambda Hosting, zip it up, and publish the Lambda using the AWS CLI. We will be doing this with and without the aws lambda configuration file. This approach is to help you understand what really happens behind the scene. Moving forward we will automate the step where you had to manually enter the lambda-related configuration and load it from a JSON file.<\/p>\n\n\n\n<h3>Creating the .NET 6 Web API Project<\/h3>\n\n\n\n<p>Let\u2019s create a new .NET 6 Web API project and named it VerySimpleAPI. As the name suggests, this API will be just a plain default Web API. We will keep it simple to make the article compact. But you get the idea, it can be a full-fledged API as well (keeping in mind the pros and cons of this deployment strategy).<\/p>\n\n\n\n<p><strong>Keep in mind that this also can be an already existing .NET 6 Web API. We will just have to install a package to it and add a couple of lines of code to it to be able to deploy it into AWS Lambda.<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/devenv_T7JPowRlsL.png\" alt=\"devenv T7JPowRlsL Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237725\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 1\"\/><\/figure>\n\n\n\n<p>You can also choose the Minimal API approach if you want. But for this demo, I will showcase both the Controller and Minimal API endpoints within the same deployment.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/devenv_3w29uH8tY6.png\" alt=\"devenv 3w29uH8tY6 Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237726\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 2\"\/><\/figure>\n\n\n\n<p>With that done, open up the Startup.cs and the following line just before the&nbsp;<strong>app.Run()<\/strong>&nbsp;line. This is just to add a minimal API endpoint to the application.<\/p>\n\n\n\n<p><code>app.MapGet<strong>(<\/strong>\"\/\", <strong>()<\/strong> =<strong>><\/strong> \"Hello from AWS Lambda!\"<strong>)<\/strong>;<\/code><\/p>\n\n\n\n<p>As of now, we just have 2 endpoints in the picture, which are the \/weatherforecast (the one from the traditional API Controller) and \/ endpoint (from the newly created Minimal API route).<\/p>\n\n\n\n<h3>Installing the Required Lambda Package &amp; Service Registration<\/h3>\n\n\n\n<p>Next, we need to install a package from AWS and add in a single line of service registration code which will automatically make the application use the Lambda Runtime. Open up the package manager console and run the following command to install the required package.<\/p>\n\n\n\n<p><code>Install-Package Amazon.Lambda.AspNetCoreServer.Hosting<\/code><\/p>\n\n\n\n<p>This is the only package you will need to turn your application into an AWS Lambda! As simple as that.&nbsp;With the package installed, let\u2019s register the Lambda Hosting Service and mention the type of resource we intend to create. In our case, it will be an HTTP API. Add the following line of code in the Startup file right after the Controllers are registered in the application <\/p>\n\n\n\n<p><code>builder.Services.AddAWSLambdaHosting<strong>(<\/strong>LambdaEventSource.HttpApi<strong>)<\/strong>;<\/code><\/p>\n\n\n\n<p>And would you be surprised if I told you that these are the only code changes actually required to make your ASP.NET Core Web API eligible to be deployed to AWS Infrastructure?&nbsp;&nbsp;Now Lambda would recognize your entire API as a Function. This makes it so easy to get it deployed into AWS Lambda as well.<\/p>\n\n\n\n<h3>Deploying the AWS Lambda with CLI<\/h3>\n\n\n\n<p>Next, let\u2019s open up the terminal right at the root of the project\u2019s directory and use the AWS CLI and Toolkit to actually deploy the Lambda. Make sure to navigate to the folder where the csproj file exists.<\/p>\n\n\n\n<p>Run the following command.<\/p>\n\n\n\n<p><code>dotnet lambda deploy-function<\/code><\/p>\n\n\n\n<p>Now, you will have to enter in some configuration to actually deploy the Lambda.<\/p>\n\n\n\n<p>Firstly, the CLI asks you to enter the required runtime. In our case, it will be&nbsp;<strong>dotnet6<\/strong>, as this is the latest runtime available for .NET applications. Read more about&nbsp;<a href=\"https:\/\/docs.aws.amazon.com\/lambda\/latest\/dg\/lambda-runtimes.html\" target=\"_blank\" rel=\"noreferrer noopener\">Lambda Runtimes here<\/a>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/WindowsTerminal_sRzuppxuev-1024x632.png\" alt=\"WindowsTerminal sRzuppxuev Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237728\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 4\"\/><\/figure>\n\n\n\n<p>Once you enter the runtime, the cli publishes your ASP.NET Core Web API in release mode with Linux runtime and ZIPs it to {namespace}.zip which can be located inside the publish folder.<\/p>\n\n\n\n<p>Nex,t follow the series of questions asked by the CLI<\/p>\n\n\n\n<ul><li>Enter the function name:&nbsp;<strong>simpleapi<\/strong>&nbsp;\u2013 This will be the internal name of the Lambda in AWS. This will create the Lambda for you.<\/li><li>Role Selection: Here you can select an already existing IAM role or create a new one. I created a new IAM role and named it simpleapirole.<\/li><li>Select Policy to attach with the IAM role. From the list that appears on the terminal, I selected #6 which points to a basic Lambda Execution Role. You can obviously select the policy based on your requirement, or even attach more policies to the role using the AWS Management Console. I did a similar thing in one of the previous articles, where my Lambda needed permission to access DynamoDB Table.&nbsp;<a href=\"https:\/\/codewithmukesh.com\/blog\/amazon-api-gateway-with-dotnet\/#Adding_DynamoDB_Permissions\" target=\"_blank\" rel=\"noreferrer noopener\">Read about it here<\/a>. This would create and propagate the IAM role into the AWS regions.<\/li><li>Enter memory size (MB): Here, let\u2019s go with 256<\/li><li>Enter timeout (seconds): Proceed with&nbsp;<strong>30<\/strong><\/li><li>Enter Handler: Be careful here. This should be the name of the namespace of the API project. In our case it is&nbsp;<strong>VerySimpleAPI<\/strong>. When the Lambda is created it will be use the namespace as the entry point of the application. Make sure it\u2019s set to the namespace \/ DLL name.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/WindowsTerminal_orG6mRGfcS-1024x632.png\" alt=\"WindowsTerminal orG6mRGfcS Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237729\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 5\"\/><\/figure>\n\n\n\n<p>That\u2019s it for the configurations! Your Lambda is now created. We have a couple of things to do before we test our deployment. Navigate to the AWS Management console\u2019s AWS Lambda homepage.<\/p>\n\n\n\n<p>If things went as expected, you will be able to see your Lambda Function.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_esOJhV5RUr-1024x295.png\" alt=\"chrome esOJhV5RUr Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237730\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 6\"\/><\/figure>\n\n\n\n<h3>Lambda Function URLs<\/h3>\n\n\n\n<p>I earlier mentioned that in order to keep things simple we are not going to use the Amazon API Gateway to expose Lambda as a URL, right? So how are we going to do this? Well, there is this feature in AWS Lambdas known as function URLs wherein we can create access endpoints per Lambda without having to create an API Gateway at all.<\/p>\n\n\n\n<p>Function URL is a dedicated HTTP endpoint for a Lambda function. When configured, the Function URL can be used to access the Lambda function via browser, client applications, and simple CURL requests. These URLs can be secured using AWS IAM Authorization. For now, we will be setting these endpoints as public.<\/p>\n\n\n\n<p>Click on the Lambda Function Name. On the Lambda Dashboard, click on the Configuration Tab and select the Function URL.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/image-5-1024x360.png\" alt=\"image 5 Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237731\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 7\"\/><\/figure>\n\n\n\n<p>Here, click on Create Function URL and select the Auth type to None.<\/p>\n\n\n\n<p>This means that AWS will not be responsible for securing access to your .NET 6 Web API. Rather, authentication and authorization will the responsibility of you as a developer and how you implement the Auth logic of your ASP.NET Core Web API. You can simply write in code that can handle Authentication using JWT tokens or OAuth, or anything you wish to.<\/p>\n\n\n\n<p>Feel free to explore the CORS configuration as well. I kept it as it is. Click on save.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_8Q3TGhkaPh.png\" alt=\"chrome 8Q3TGhkaPh Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237733\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 8\"\/><\/figure>\n\n\n\n<p>This would generate a Function URL that is linked with your Lambda.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_oNIEENiupx-1024x328.png\" alt=\"chrome oNIEENiupx Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237735\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 9\"\/><\/figure>\n\n\n\n<h3>Testing<\/h3>\n\n\n\n<p>Let\u2019s use this Function URL and test it via our browser since we have not really added any POST \/ Delete \/ Patch methods to the endpoints. It\u2019s just 2 simple GET endpoints if you remember. First, let\u2019s test the \/ endpoint. And as we expected, we get a simple Hello message. Note that there is a slight delay in response, but just under a couple of seconds. When you retry the request, it\u2019s much faster. This is because of the cold start of the AWS Lambda that we learned in the Pros and Cons section of this article.<\/p>\n\n\n\n<p>Next, let\u2019s navigate to the \/weatherforecast endpoint. You can see that the response is pretty fast.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_6efckF9G05-1024x212.png\" alt=\"chrome 6efckF9G05 Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237737\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 11\"\/><\/figure>\n\n\n\n<h3>Adding Environment Variables to the AWS Lambda<\/h3>\n\n\n\n<p>The swagger endpoint doesn\u2019t seem to work though. This is because of our Startup file where we set the Swagger to be enabled only if the Environment is DEVELOPMENT. The simple fix here is to add a new environment variable to the AWS Lambda and set the ASPNETCORE ENVIRONMENT to Development.<\/p>\n\n\n\n<p>Again, open up the Lambda Function and navigate to Configuration \/ Environment Variables and add a new one with the key as \u201cASPNETCORE_ENVIRONMENT\u201d and value as \u201cDevelopment\u201d.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_fJkBRV2ofR-1024x289.png\" alt=\"chrome fJkBRV2ofR Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237738\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 12\"\/><\/figure>\n\n\n\n<p>Save it, give it a couple of seconds for the propagation to happen and then navigate to &lt;function-url&gt;\/swagger<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/08\/chrome_miWaXeUa5H-1024x537.png\" alt=\"chrome miWaXeUa5H Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs\" class=\"wp-image-237739\" title=\"Hosting ASP.NET Core Web API with AWS Lambda - Truly Serverless REST APIs 13\"\/><\/figure>\n\n\n\n<p>There you go, Swagger is now accessible as well. I am actually enjoying working with .NET and AWS. The team has actually made it pretty intriguing to work with .NET applications.<\/p>\n\n\n\n<p>That\u2019s actually how simple it is for Hosting ASP.NET Core Web API with AWS Lambda! Now, there are certain parts of this approach that can be automated and made much easier to deploy. For example, in cases where you have made changes to the VerySimpleAPI project and want to re-deploy it to AWS Lambda, the CLI would again ask for the runtime, function name, handler, and roles and so much more. Remember entering these values in the CLI while creating the Lambda?<\/p>\n\n\n\n<p>Or in case, where you need to deploy this API to another AWS account for some reason, you would have to manually go into the AWS Management Console to create a new function URL, and add a new environment variable.<\/p>\n\n\n\n<p>Wouldn\u2019t it make sense to store these values somewhere as configurations within the project so that the CLI can read the data from the configuration the next time we intend to deploy? That\u2019s exactly what the AWS CLI does. All you have to do is just add in a new JSON file, fill in the required configuration one time, and from then on the CLI picks up the configuration and makes things much quicker for you! Let\u2019s explore this now.<\/p>\n\n\n\n<h3>AWS Lambda CLI Functions<\/h3>\n\n\n\n<p>Before proceeding, let\u2019s delete the Lambda that we deployed earlier. You can do this by navigating to the management console, selecting the Lambda function, and clicking on delete. But since we have AWS CLI already set up locally, I prefer to run a cli command that can delete the Lambda easily. To list the available Lambdas, run the following.aws lambda list-functions<\/p>\n\n\n\n<p>To delete the Lambda, run the following.<\/p>\n\n\n\n<p><code>aws lambda delete-function --function-name simpleapi<\/code><\/p>\n\n\n\n<p>Now that our Lambda is removed, let\u2019s continue.<\/p>\n\n\n\n<h3>Storing Lambda Configurations in&nbsp;<strong>aws-lambda-tools-defaults.json<\/strong><\/h3>\n\n\n\n<p>Switch to Visual Studio. At the root of the project, add a new JSON file and name it&nbsp;<strong>aws-lambda-tools-defaults.json<\/strong>. This is the Default File Name expected by the AWS Lambda Tools CLI. There was no proper documentation for this file. So I dug up the Source from the AWS DOTNET CLI Repository. Here is the&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/aws\/aws-extensions-for-dotnet-cli\/blob\/01cd7391032bd0cebc7c85159bf60a0aa74e1510\/src\/Amazon.Lambda.Tools\/LambdaToolsDefaults.cs\" target=\"_blank\">class for your reference<\/a>. All the properties supported by the&nbsp;<strong>aws-lambda-tools-defaults.json<\/strong>&nbsp;file are listed in this class.<\/p>\n\n\n\n<p>We would be adding some crucial configurations to this JSON file. Add the following content to your\u00a0<strong>aws-lambda-tools-defaults.json<\/strong>\u00a0file.<\/p>\n\n\n\n<p><code><strong>{<\/strong> \"profile\": \"\", \"region\": \"\", \"configuration\": \"Release\", \"function-runtime\": \"dotnet6\", \"function-memory-size\": 256, \"function-timeout\": 30, \"function-handler\": \"VerySimpleAPI\", \"function-name\": \"verysimpleapi\", \"environment-variables\": \"ASPNETCORE_ENVIRONMENT=Development;SOMETHING_ELSE=SomeValue\", \"function-url-enable\": true<strong>}<\/strong><\/code><\/p>\n\n\n\n<p>As you see, since the profile and regions are already configured within the AWS CLI, we are keeping it empty. In case you need to deploy to another AWS region using a different configured local profile, you would have to modify these values.<\/p>\n\n\n\n<p>Next up, the configuration is set to Release for optimizing the published package size, the runtime is set to dotnet6, memory size to 256, timeout to 30, handler to the namespace of the ASP.NET Core application, function name to verysimpleapi.<\/p>\n\n\n\n<p>Then, remember we needed to add Environment variables to change the ASP.NET Core Environment to Development? So, to the environment-variables property, we add a list of key-value pairs using the following format -&gt; \u201ckey1=value1;key2=value2\u201d. I added a second dummy variable just to showcase the usage.<\/p>\n\n\n\n<p>Finally, we set the function URL to enable the boolean to be true. This is to enable and create a Function URL that is associated with this Lambda. This also prints us the Function URL on the terminal once the Lambda is deployed, pretty handy, right? Thus the only property that we left out is the role and policy selection. This is to keep it flexible for adding new roles or using existing ones.<\/p>\n\n\n\n<p>Let\u2019s see our changes in action now. Save the changes and open up the terminal at the root of the project directory where the csproj file lives and run the deploy command again.dotnet lambda deploy-function<\/p>\n\n\n\n<p>You can see that the Lambda gets deployed automatically using the values read from the configuration file. We will still have to enter the role to be used for this Lambda. Once that\u2019s entered, the Lambda function is deployed and the Function URL is written onto the terminal window. Just click on the URL and you are all ready to test your new deployment. Attaching a screenshot for this.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we will learn about hosting ASP.NET Core Web API with AWS Lambda in a rather simple-to-follow manner. It is going to be as simple as developing a .NET 6 Web API as you would normally do using Controllers or Minimal APIs, and running some CLI commands which will deploy your API as &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet\/hosting-net-6-web-api-with-aws-lambda-truly-server-less-rest-apis\/\"> <span class=\"screen-reader-text\">Hosting .NET 6 Web API with AWS Lambda \u2013 Truly Server less REST APIs<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[59],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/906"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=906"}],"version-history":[{"count":2,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/906\/revisions"}],"predecessor-version":[{"id":909,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/906\/revisions\/909"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=906"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=906"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=906"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}