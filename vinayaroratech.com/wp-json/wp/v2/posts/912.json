{"id":912,"date":"2022-10-31T17:52:31","date_gmt":"2022-10-31T12:22:31","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=912"},"modified":"2022-10-31T17:52:33","modified_gmt":"2022-10-31T12:22:33","slug":"working-with-aws-s3-using-asp-net-core-upload-download-delete-files","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet-core\/working-with-aws-s3-using-asp-net-core-upload-download-delete-files\/","title":{"rendered":"Working with AWS S3 using ASP.NET Core \u2013 Upload, Download &#038; Delete Files"},"content":{"rendered":"\n<p>In this article, we will be get started on working with AWS S3 using ASP.NET Core Web API to upload, download and delete files from Amazons Super Scalable S3! Apart from that, we will also learn more about Amazons S3, the problem it solves, dive a bit into the AWS Console for S3 Management, AWS CLI, and Credentials Store, Generate Access Keys for accessing S3 via SDKs, Creating and Deleting S3 buckets, a bit about pre-signed URLs and so on!<\/p>\n\n\n\n<p>We will be building a .NET 6 Web API that demonstrated all of the above topics. This API would allow you to create and delete S3 Buckets, and upload and delete files from specific Amazon S3 Buckets.<\/p>\n\n\n\n<h2>Creating User &amp; Generating Access Keys via AWS IAM<\/h2>\n\n\n\n<p>Lets start with the security part.<\/p>\n\n\n\n<p>As mentioned earlier, we are going to work with AWS SDK to perform operations over S3 via our .NET Application. Thus, the first requirement is to have a way to access AWS S3 via the 3rd party application ( our Web API ). IAM or the Identity &amp; Access Management from AWS is responsible for creating users and granting access to the users with specific privileges.<\/p>\n\n\n\n<p>First up, sign in to the AWS Console.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"567\" src=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1024x567.png\" alt=\"\" class=\"wp-image-913\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1024x567.png 1024w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-300x166.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-768x426.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1536x851.png 1536w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image.png 1664w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>In the search bar, search for IAM and open it. IAM helps you manage security for AWS resources in general.<\/p>\n\n\n\n<p>Once IAM loads up, click on users. Our intention is to create a new user that has full access rights to perform operations with the AWS S3 Service.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-27-1024x630.png\" alt=\"image 27 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237210\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 2\"\/><\/figure>\n\n\n\n<p>In the next form, add in your user name and make sure to select the AWS Credential type as Access Key. This enables us to use the generated keys for SDK \/ API-related development works.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"561\" src=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1-1024x561.png\" alt=\"\" class=\"wp-image-914\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1-1024x561.png 1024w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1-300x164.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1-768x420.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1-1536x841.png 1536w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-1.png 1677w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Next, we have to attach policies\/permissions to this user. Search for S3 add select AmazonS3FullAccess. You can choose to add more if you want. But for this article, we only need this policy to be added.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-30-1024x832.png\" alt=\"image 30 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237213\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 4\"\/><\/figure>\n\n\n\n<p>On the next screen, you get an option to add tags to the user. This can be useful for billing\/monitoring purposes. But for now, we can skip this step.<\/p>\n\n\n\n<p>Finally, Review the details that you added and click on Create User.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"506\" src=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-2-1024x506.png\" alt=\"\" class=\"wp-image-915\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-2-1024x506.png 1024w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-2-300x148.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-2-768x379.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2022\/10\/image-2.png 1537w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Thats it. A new user will be created for you.<\/p>\n\n\n\n<p>As the next step, make sure to download the generated CSV for safekeeping. This usually has your Access Key Id and Secret Access Key. We need these details later on when we try to integrate our code with AWS S3 Service.<\/p>\n\n\n\n<h2>Creating your First AWS S3 Bucket via AWS Console<\/h2>\n\n\n\n<p>With the user created, Lets explore a bit of the AWS S3 Console. Search for S3 in the top search bar and open up the first result.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/04\/image-1.png\" alt=\"image 1 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237249\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 7\"\/><\/figure>\n\n\n\n<p>As discussed earlier, we will start with creating S3 Buckets via console. In the later part, we will see how to create and delete S3 buckets via .NET.<\/p>\n\n\n\n<p>So, Click on Create bucket.<\/p>\n\n\n\n<p>There are a few rules to be followed while naming your new S3 Bucket. The most important rule is that your bucket name should be globally unique.<\/p>\n\n\n\n<p>As for the AWS region, select the region close to you for optimal transfer speeds.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-42.png\" alt=\"image 42 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237227\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 9\"\/><\/figure>\n\n\n\n<p>You can leave everything else as it is.<\/p>\n\n\n\n<p>By default, AWS blocks all kinds of public access into the bucket. Lets keep it that way. Further in the tutorial, we will learn a way with .NET to generate URLs to your uploaded files that expire after a given amount of time.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-35.png\" alt=\"image 35 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237218\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 10\"\/><\/figure>\n\n\n\n<p>Here too, tags are optional.<\/p>\n\n\n\n<p>Thats it. Review your changes and hit on Create Bucket.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-36.png\" alt=\"image 36 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237219\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 11\"\/><\/figure>\n\n\n\n<p>The below screenshot shows that your new S3 bucket is available.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-43-1024x248.png\" alt=\"image 43 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237228\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 12\"\/><\/figure>\n\n\n\n<p>As a simple exercise, you can play around with the dashboard and try to upload some files into it. Below, I uploaded a Blog banner into my S3 bucket.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/04\/image-2.png\" alt=\"image 2 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237251\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 13\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/04\/image-3-1024x412.png\" alt=\"image 3 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237252\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 14\"\/><\/figure>\n\n\n\n<p>Moreover, you can also create folders in your bucket and upload objects to it. Playing around with the S3 Dashboard should get you familiar with using it.<\/p>\n\n\n\n<p>Now, lets see how to build our ASP.NET Core Web API to work with AWS.<\/p>\n\n\n\n<h2>AWS Configurations &amp; CLI<\/h2>\n\n\n\n<p>As you know that we already have the secret keys with us, lets talk about how to use them for .NET Applications. Now, AWS CLI provides some real secure ways to store your secret keys. Traditionally, one would place the access keys within the appsettings.json of the web application, or to the secret store. With AWS CLI, there is a dedicated AWS Local store that manages your credentials and configurations.<\/p>\n\n\n\n<p>To get started with it, first install the AWS CLI on your machine. Note that the below screenshots are for Windows Machines.<\/p>\n\n\n\n<p><a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/getting-started-install.html\" target=\"_blank\" rel=\"noreferrer noopener\">Download AWS CLI here<\/a>.<\/p>\n\n\n\n<p>Note that the above link has downloadable installers for Windows, Mac, and Linux Operating Systems.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-38.png\" alt=\"image 38 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237222\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 15\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-39.png\" alt=\"image 39 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237223\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 16\"\/><\/figure>\n\n\n\n<p>Once you have downloaded and installed the AWS CLI, make sure to restart any open command prompts \/ terminals. After that, type in&nbsp;<strong>aws -version&nbsp;<\/strong>to check if the CLI tool has been installed properly on your machine. If you see something like the below, you are probably good to go.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/04\/image-4.png\" alt=\"image 4 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237256\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 17\"\/><\/figure>\n\n\n\n<p>With that done, lets create a new AWS Local Configuration profile which will be used by our .NET application to read in the credentials and other configuration stuff. Type in the following command to get started with creating an AWS local profile.aws configure &#8211;profile &#8220;my-profile-name&#8221;<\/p>\n\n\n\n<p>You can name your profile something like s3-demo or so. This is just for our identification. With that, you will be prompted to enter the access id and the secret. Remember we downloaded a CSV file earlier? while creating a new user. This is when that CSV file would come in handy. Paste in the Access Key and Secret Access Key.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-44-1024x572.png\" alt=\"image 44 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237229\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 18\"\/><\/figure>\n\n\n\n<p>As for the default region name, make sure to give the same region that you used while creating our new S3 bucket. If you are unsure, simply navigate to the S3 dashboard, select your newly created bucket and check its properties. You will get the region details.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/04\/image-6.png\" alt=\"image 6 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237259\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 19\"\/><\/figure>\n\n\n\n<p>In case you gave in some details while setting up the configurations, nothing to worry about. Re-enter the profile creation command and AWS will take you again through the configurations.<\/p>\n\n\n\n<p>Now, whatever data you gave will be stored securely under your user folder in the below path. Feel free to explore the files.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-41.png\" alt=\"image 41 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237225\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 20\"\/><\/figure>\n\n\n\n<p>Note that you have to use this profile name while working with the .NET application. The SDK would pull in the credentials related to the profile name you give. You will understand more when we set up the appsettings.json for our .NET Web API.<\/p>\n\n\n\n<h2>Working with AWS S3 using ASP.NET Core \u2013 Getting Started<\/h2>\n\n\n\n<p>Next, lets start with the development part! For this demonstration, I will be using Visual Studio 2022 Community as my IDE with the latest stable release of .NET 6 SDK installed on my machine.<\/p>\n\n\n\n<h3>Setting up the Project<\/h3>\n\n\n\n<p>Create a new ASP.NET Core Web API solution with .NET 6.0. We will be using the traditional API controllers approach for this sample project. Note that we have also enabled the OpenAPI support, which will configure the Swagger UI for us, which in turn will help our API Documentation and Testing easily.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/codewithmukesh.com\/wp-content\/uploads\/2022\/03\/image-26.png\" alt=\"image 26 Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified\" class=\"wp-image-237208\" title=\"Working with AWS S3 using ASP.NET Core - Upload, Download &amp; Delete Files - Simplified 21\"\/><\/figure>\n\n\n\n<p>First up, lets modify the appsettings.json of the Web API project. Make sure that your appsettings.json looks like the one below. Ensure that you are populating the Profile and Region fields with the values you have configured earlier in the AWS CLI.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"AWS\": {\n    \"Profile\": \"s3-dotnet-demo\",\n    \"Region\": \"ap-south-1\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>Note that s3-dotnet-demo is the name of the profile I created locally on my machine, and ap-south-1 is the closest region to where I am and also is the region where my test S3 bucket is created.<\/p>\n\n\n\n<p>Run the following commands via Visual Studio to install the required AWS NuGet packages.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Install-Package AWSSDK.Extensions.NETCore.Setup\nInstall-Package AWSSDK.S3<\/code><\/pre>\n\n\n\n<p>With that done, lets register the AWS Service into the .NET applications Container. Open up the Program.cs and make the modifications as below. You might have to use the Amazon.S3 namespace while referencing the below changes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>private static IServiceCollection AddAws(this IServiceCollection services, IConfiguration config)\r\n    {\r\n        var awsOptions = config.GetAWSOptions();\r\n        awsOptions.Credentials = new EnvironmentVariablesAWSCredentials();\r\n        services.AddDefaultAWSOptions(awsOptions);\r\n        services.AddAWSService&lt;IAmazonS3>();\r\n        return services;\r\n    }<\/code><\/pre>\n\n\n\n<h3>How to Upload Files to AWS S3 using ASP.NET Core?<\/h3>\n\n\n\n<p>First up, is an endpoint to Upload Files to a specific Bucket in AWS S3.<\/p>\n\n\n\n<p>The simple flow will be,<\/p>\n\n\n\n<ul><li>The user passes the File, name of the bucket, and a folder name to this endpoint.<\/li><li>The code should first check if such a BucketName exists in the S3 account. If not, it returns an exception. You could also modify the code to create an S3 Bucket for you if the entered Bucket Name doesnt exist.<\/li><li>Finally, creates a request object and send it to Amazon Service which would upload the file into S3 for you.<\/li><\/ul>\n\n\n\n<p>Here is what the code would look like.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private readonly ApplicationDbContext _dbContext;\r\n    private readonly IAmazonS3 _s3Client;\r\n    private readonly ILogger&lt;ClaimService> _logger;\r\n    private readonly AWSOptions _awsOptions;\r\n\r\n    public ClaimService(\r\n        ApplicationDbContext dbContext,\r\n        IAmazonS3 s3Client,\r\n        ILogger&lt;ClaimService> logger,\r\n        IOptions&lt;AWSOptions> awsOptions)\r\n    {\r\n        _dbContext = dbContext;\r\n        _s3Client = s3Client;\r\n        _logger = logger;\r\n        _awsOptions = awsOptions.Value;\r\n    }\n\npublic async Task&lt;string> UploadFileToS3(IFormFile file, string prefix, CancellationToken cancellationToken = default)\r\n    {\r\n        bool bucketExists = await _s3Client.DoesS3BucketExistAsync(_bucketName);\r\n        if (!bucketExists)\r\n            throw new Application.Common.Exceptions.NotFoundException($\"Bucket {_bucketName} does not exist.\");\r\n\r\n        var request = new PutObjectRequest()\r\n        {\r\n            BucketName = _bucketName,\r\n            Key = string.IsNullOrEmpty(prefix) ? file.FileName : $\"{prefix?.TrimEnd('\/')}\/{file.FileName}\",\r\n            InputStream = file.OpenReadStream()\r\n        };\r\n        request.Metadata.Add(\"Content-Type\", file.ContentType);\r\n        var response = await _s3Client.PutObjectAsync(request, cancellationToken);\r\n        _logger.LogInformation($\"File {prefix}\/{file.FileName} uploaded to S3 successfully!\");\r\n        return $\"https:\/\/{_bucketName}.s3.{_awsOptions.DefaultClientConfig?.RegionEndpoint?.SystemName}.amazonaws.com\/{prefix}\/{file.FileName}\";\r\n    }<\/code><\/pre>\n\n\n\n<h4>Understanding Pre signed URLs in AWS S3<\/h4>\n\n\n\n<p>So, as mentioned many times, the objects that you upload to S3 Buckets are secured and cannot be accessed or viewed by the public. But as per our requirement, we need to expose an URL that can open up \/ preview the S3 object to the public, but limit access to just about a minute or so, after which the link would be expired. This is where the Pre Signed URLs come into the picture. Its possible to define the amount of time after which the link would expire.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public async Task&lt;S3ObjectDto> GetAllFilesAsync(string bucketName, string? prefix)\r\n    {\r\n        var bucketExists = await _s3Client.DoesS3BucketExistAsync(bucketName);\r\n        if (!bucketExists) throw new NotFoundException($\"Bucket {bucketName} does not exist.\");\r\n        var request = new ListObjectsV2Request() { BucketName = bucketName, Prefix = prefix };\r\n        var result = await _s3Client.ListObjectsV2Async(request);\r\n        var s3Objects = result.S3Objects.Select(s =>\r\n        {\r\n            var urlRequest = new GetPreSignedUrlRequest()\r\n            {\r\n                BucketName = bucketName,\r\n                Key = s.Key,\r\n                Expires = DateTime.UtcNow.AddMinutes(1)\r\n            };\r\n            return new S3ObjectDto()\r\n            {\r\n                Name = s.Key,\r\n                PresignedUrl = _s3Client.GetPreSignedURL(urlRequest),\r\n            };\r\n        });\r\n\r\n        s3Objects;\r\n    }<\/code><\/pre>\n\n\n\n<p>In above code, I have set the expiration timeout to be 1 Min.<\/p>\n\n\n\n<p>The URL request is formed using the bucket name, Key (entire file name of the object), and the expiration parameter. This method would return a pre-signed URL.<\/p>\n\n\n\n<h3>How to Download Files from AWS S3 using ASP.NET Core?<\/h3>\n\n\n\n<p>Next, is a simple endpoint that can preview the file in Swagger. Here also, we will be passing the bucket name and key of the object (entire file name) and we expect the endpoint to return the binary of the uploaded file back to the user.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public async Task GetFileByKeyAsync(string bucketName, string key)\r\n    {\r\n        var bucketExists = await _s3Client.DoesS3BucketExistAsync(bucketName);\r\n        if (!bucketExists) throw new NotFoundException($\"Bucket {bucketName} does not exist.\");\r\n        var s3Object = await _s3Client.GetObjectAsync(bucketName, key);\r\n        return File(s3Object.ResponseStream, s3Object.Headers.ContentType);\r\n    }<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we will be get started on working with AWS S3 using ASP.NET Core Web API to upload, download and delete files from Amazons Super Scalable S3! Apart from that, we will also learn more about Amazons S3, the problem it solves, dive a bit into the AWS Console for S3 Management, AWS &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet-core\/working-with-aws-s3-using-asp-net-core-upload-download-delete-files\/\"> <span class=\"screen-reader-text\">Working with AWS S3 using ASP.NET Core \u2013 Upload, Download &#038; Delete Files<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[76,59,78,77,75],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/912"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=912"}],"version-history":[{"count":1,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/912\/revisions"}],"predecessor-version":[{"id":917,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/912\/revisions\/917"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=912"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=912"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=912"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}