{"id":92,"date":"2020-06-16T16:45:43","date_gmt":"2020-06-16T16:45:43","guid":{"rendered":"http:\/\/vinayaroratech.com\/?p=92"},"modified":"2020-06-16T16:48:35","modified_gmt":"2020-06-16T16:48:35","slug":"coding-standards","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/developer-guide\/coding-standards\/","title":{"rendered":"Coding standards"},"content":{"rendered":"<p>There are three supported .NET coding convention categories:<\/p>\n<h2 id=\"language-conventions\">Language conventions<\/h2>\n<div class=\"col-md-10\">\n<article id=\"_content\" class=\"content wrap\" data-uid=\"en\/developer\/tutorials\/coding-standards\">\n<h3 id=\"net-code-style-settings\">.NET code style settings<\/h3>\n<h4 id=\"this-qualifiers\">&#8220;this.&#8221; qualifiers<\/h4>\n<p>This style rule can be applied to fields, properties, methods, or events.<\/p>\n<ul>\n<li>Prefer the code element\u00a0<em>not<\/em>\u00a0to be prefaced with\u00a0<code>this.<\/code><\/li>\n<li>Prefer fields\u00a0<em>not<\/em>\u00a0to be prefaced with\u00a0<code>this.<\/code>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\ncapacity = <span class=\"hljs-number\">0<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">this<\/span>.capacity = <span class=\"hljs-number\">0<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer properties\u00a0<em>not<\/em>\u00a0to be prefaced with\u00a0<code>this.<\/code>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nID = <span class=\"hljs-number\">0<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">this<\/span>.ID = <span class=\"hljs-number\">0<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer methods\u00a0<em>not<\/em>\u00a0to be prefaced with\u00a0<code>this.<\/code>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nDisplay();\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">this<\/span>.Display();\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer events\u00a0<em>not<\/em>\u00a0to be prefaced with\u00a0<code>this.<\/code>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nElapsed += Handler;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">this<\/span>.Elapsed += Handler;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"language-keywords-instead-of-framework-type-names-for-type-references\">Language keywords instead of framework type names for type references<\/h4>\n<p>This style rule can be applied to local variables, method parameters, and class members, or as a separate rule to type member access expressions.<\/p>\n<ul>\n<li>Prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">int<\/span> _member;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> Int32 _member;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> local = <span class=\"hljs-keyword\">int<\/span>.MaxValue;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> local = Int32.MaxValue;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"modifier-preferences\">Modifier preferences<\/h4>\n<p>The style rules in this section concern modifier preferences, including requiring accessibility modifiers, specifying the desired modifier sort order, and requiring the read-only modifier.<\/p>\n<ul>\n<li>Prefer accessibility modifiers to be declared except for public interface members.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span>\r\n{\r\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">const<\/span> <span class=\"hljs-keyword\">string<\/span> thisFieldIsConst = <span class=\"hljs-string\">\"constant\"<\/span>;\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span>\r\n{\r\n    <span class=\"hljs-keyword\">const<\/span> <span class=\"hljs-keyword\">string<\/span> thisFieldIsConst = <span class=\"hljs-string\">\"constant\"<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer the specified ordering:<em><code>public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:silent<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span>\r\n{\r\n    <span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-keyword\">readonly<\/span> <span class=\"hljs-keyword\">int<\/span> _daysInYear = <span class=\"hljs-number\">365<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"parentheses-preferences\">Parentheses preferences<\/h4>\n<p>The style rules in this section concern parentheses preferences, including the use of parentheses for arithmetic, relational, and other binary operators.<\/p>\n<ul>\n<li>Prefer parentheses to clarify arithmetic operator (*, \/, %, +, -, &lt;&lt;, &gt;&gt;, &amp;, ^, |) precedence\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a + (b * c);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a + b * c;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer parentheses to clarify relational operator (&gt;, &lt;, &lt;=, &gt;=, is, as, ==, !=) precedence\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = (a &lt; b) == (c &gt; d);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a &lt; b == c &gt; d;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer parentheses to clarify other binary operator (&amp;&amp;, ||, ??) precedence\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a || (b &amp;&amp; c);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a || b &amp;&amp; c;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer to not have parentheses when operator precedence is obvious\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = a.b.Length;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = (a.b).Length;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"expression-level-preferences\">Expression-level preferences<\/h4>\n<p>The style rules in this section concern expression-level preferences, including the use of object initializers, collection initializers, explicit or inferred tuple names, and inferred anonymous types.<\/p>\n<ul>\n<li>Prefer objects to be initialized using object initializers when possible\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> c = <span class=\"hljs-keyword\">new<\/span> Customer() { Age = <span class=\"hljs-number\">21<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> c = <span class=\"hljs-keyword\">new<\/span> Customer();\r\nc.Age = <span class=\"hljs-number\">21<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer collections to be initialized using collection initializers when possible\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> list = <span class=\"hljs-keyword\">new<\/span> List&lt;<span class=\"hljs-keyword\">int<\/span>&gt; { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> list = <span class=\"hljs-keyword\">new<\/span> List&lt;<span class=\"hljs-keyword\">int<\/span>&gt;();\r\nlist.Add(<span class=\"hljs-number\">1<\/span>);\r\nlist.Add(<span class=\"hljs-number\">2<\/span>);\r\nlist.Add(<span class=\"hljs-number\">3<\/span>);\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer tuple names to ItemX properties\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n(<span class=\"hljs-keyword\">string<\/span> name, <span class=\"hljs-keyword\">int<\/span> age) customer = GetCustomer();\r\n<span class=\"hljs-keyword\">var<\/span> name = customer.name;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n(<span class=\"hljs-keyword\">string<\/span> name, <span class=\"hljs-keyword\">int<\/span> age) customer = GetCustomer();\r\n<span class=\"hljs-keyword\">var<\/span> name = customer.Item1;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer inferred tuple element names\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> tuple = (age, name);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> tuple = (age: age, name: name);\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer explicit anonymous type member names\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> anon = <span class=\"hljs-keyword\">new<\/span> { age = age, name = name };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> anon = <span class=\"hljs-keyword\">new<\/span> { age, name };\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer autoproperties over properties with private backing fields\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">int<\/span> Age { <span class=\"hljs-keyword\">get<\/span>; }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">int<\/span> age;\r\n\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Age\r\n{\r\n    <span class=\"hljs-keyword\">get<\/span>\r\n    {\r\n        <span class=\"hljs-keyword\">return<\/span> age;\r\n    }\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer using a null check with pattern-matching over\u00a0<em><code>object.ReferenceEquals<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">value<\/span> <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-literal\">null<\/span>)\r\n    <span class=\"hljs-keyword\">return<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">object<\/span>.ReferenceEquals(<span class=\"hljs-keyword\">value<\/span>, <span class=\"hljs-literal\">null<\/span>))\r\n    <span class=\"hljs-keyword\">return<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer assignments with a ternary conditional over an if-else statement\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">string<\/span> s = expr ? <span class=\"hljs-string\">\"hello\"<\/span> : <span class=\"hljs-string\">\"world\"<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">string<\/span> s;\r\n<span class=\"hljs-keyword\">if<\/span> (expr)\r\n{\r\n    s = <span class=\"hljs-string\">\"hello\"<\/span>;\r\n}\r\n<span class=\"hljs-keyword\">else<\/span>\r\n{\r\n    s = <span class=\"hljs-string\">\"world\"<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer return statements to use a ternary conditional over an if-else statement\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">return<\/span> expr ? <span class=\"hljs-string\">\"hello\"<\/span> : <span class=\"hljs-string\">\"world\"<\/span>\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (expr)\r\n{\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">\"hello\"<\/span>;\r\n}\r\n<span class=\"hljs-keyword\">else<\/span>\r\n{\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">\"world\"<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer compound assignment expressions\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nx += <span class=\"hljs-number\">1<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\nx = x + <span class=\"hljs-number\">1<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"null-checking-preferences\">Null-checking preferences<\/h4>\n<p>The style rules in this section concern null-checking preferences.<\/p>\n<ul>\n<li>Prefer null coalescing expressions to ternary operator checking\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = x ?? y;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = x != <span class=\"hljs-literal\">null<\/span> ? x : y; <span class=\"hljs-comment\">\/\/ or<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = x == <span class=\"hljs-literal\">null<\/span> ? y : x;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer to use null-conditional operator when possible\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = o?.ToString();\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = o == <span class=\"hljs-literal\">null<\/span> ? <span class=\"hljs-literal\">null<\/span> : o.ToString(); <span class=\"hljs-comment\">\/\/ or<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> v = o != <span class=\"hljs-literal\">null<\/span> ? o.String() : <span class=\"hljs-literal\">null<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3 id=\"c-code-style-settings\">C# code style settings<\/h3>\n<h4 id=\"implicit-and-explicit-types\">Implicit and explicit types<\/h4>\n<p>The style rules in this section concern the use of the var keyword versus an explicit type in a variable declaration. This rule can be applied separately to built-in types, when the type is apparent, and elsewhere.<\/p>\n<ul>\n<li>Prefer\u00a0<em><code>var<\/code><\/em>\u00a0is used to declare variables with built-in system types such as\u00a0<em><code>int<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> x = <span class=\"hljs-number\">5<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> x = <span class=\"hljs-number\">5<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer\u00a0<em><code>var<\/code><\/em>\u00a0when the type is already mentioned on the right-hand side of a declaration expression\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> obj = <span class=\"hljs-keyword\">new<\/span> Customer();\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\nCustomer obj = <span class=\"hljs-keyword\">new<\/span> Customer();\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer\u00a0<em><code>var<\/code><\/em>\u00a0over explicit type in all cases, unless overridden by another code style rule\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> f = <span class=\"hljs-keyword\">this<\/span>.Init();\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">bool<\/span> f = <span class=\"hljs-keyword\">this<\/span>.Init();\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"expression-bodied-members\">Expression-bodied members<\/h4>\n<p>The style rules in this section concern the use of\u00a0<a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/programming-guide\/statements-expressions-operators\/expression-bodied-members\">expression-bodied members<\/a>\u00a0when the logic consists of a single expression. This rule can be applied to methods, constructors, operators, properties, indexers, and accessors.<\/p>\n<ul>\n<li>Prefer block bodies for methods\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> <span class=\"hljs-title\">GetAge<\/span>() <\/span>{ <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.Age; }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> <span class=\"hljs-title\">GetAge<\/span>() <\/span>=&gt; <span class=\"hljs-keyword\">this<\/span>.Age;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer block bodies for constructors\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-title\">Customer<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> age<\/span>) <\/span>{ Age = age; }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-title\">Customer<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> age<\/span>) <\/span>=&gt; Age = age;\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer block bodies for operators\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> ComplexNumber <span class=\"hljs-keyword\">operator<\/span> + (ComplexNumber c1, ComplexNumber c2)\r\n{ <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> ComplexNumber(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary); }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> ComplexNumber <span class=\"hljs-keyword\">operator<\/span> + (ComplexNumber c1, ComplexNumber c2)\r\n    =&gt; <span class=\"hljs-keyword\">new<\/span> ComplexNumber(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary);\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer expression bodies for properties when they will be a single line\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Age =&gt; _age;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Age { <span class=\"hljs-keyword\">get<\/span> { <span class=\"hljs-keyword\">return<\/span> _age; }}\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer expression bodies for indexers\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> T <span class=\"hljs-keyword\">this<\/span>[<span class=\"hljs-keyword\">int<\/span> i] =&gt; _values[i];\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> T <span class=\"hljs-keyword\">this<\/span>[<span class=\"hljs-keyword\">int<\/span> i] { <span class=\"hljs-keyword\">get<\/span> { <span class=\"hljs-keyword\">return<\/span> _values[i]; } }\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer expression bodies for accessors\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Age { <span class=\"hljs-keyword\">get<\/span> =&gt; _age; <span class=\"hljs-keyword\">set<\/span> =&gt; _age = <span class=\"hljs-keyword\">value<\/span>; }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Age { <span class=\"hljs-keyword\">get<\/span> { <span class=\"hljs-keyword\">return<\/span> _age; } <span class=\"hljs-keyword\">set<\/span> { _age = <span class=\"hljs-keyword\">value<\/span>; } }\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer expression bodies for lambdas\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nFunc&lt;<span class=\"hljs-keyword\">int<\/span>, <span class=\"hljs-keyword\">int<\/span>&gt; square = x =&gt; x * x;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\nFunc&lt;<span class=\"hljs-keyword\">int<\/span>, <span class=\"hljs-keyword\">int<\/span>&gt; square = x =&gt; { <span class=\"hljs-keyword\">return<\/span> x * x; };\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"pattern-matching\">Pattern matching<\/h4>\n<p>The style rules in this section concern the use of\u00a0<a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/pattern-matching\">pattern matching<\/a>\u00a0in C#.<\/p>\n<ul>\n<li>Prefer pattern matching instead of is expressions with type casts\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (o <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">int<\/span> i) {...}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (o <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">int<\/span>) {<span class=\"hljs-keyword\">var<\/span> i = (<span class=\"hljs-keyword\">int<\/span>)o; ... }\r\n<\/code><\/pre>\n<\/li>\n<li>Prefer pattern matching instead of\u00a0<em><code>as<\/code><\/em>\u00a0expressions with null checks to determine if something is of a particular type\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (o <span class=\"hljs-keyword\">is<\/span> <span class=\"hljs-keyword\">string<\/span> s) {...}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> s = o <span class=\"hljs-keyword\">as<\/span> <span class=\"hljs-keyword\">string<\/span>;\r\n<span class=\"hljs-keyword\">if<\/span> (s != <span class=\"hljs-literal\">null<\/span>) {...}\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"inlined-variable-declarations\">Inlined variable declarations<\/h4>\n<p>This style rule concerns whether out variables are declared inline or not. Starting in C# 7, you can\u00a0<a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/language-reference\/keywords\/out-parameter-modifier#calling-a-method-with-an-out-argument\">declare an out variable in the argument list of a method call<\/a>, rather than in a separate variable declaration.<\/p>\n<ul>\n<li>Prefer\u00a0<em><code>out<\/code><\/em>\u00a0variables to be declared inline in the argument list of a method call when possible\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">int<\/span>.TryParse(<span class=\"hljs-keyword\">value<\/span>, <span class=\"hljs-keyword\">out<\/span> <span class=\"hljs-keyword\">int<\/span> i) {...}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> i;\r\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">int<\/span>.TryParse(<span class=\"hljs-keyword\">value<\/span>, <span class=\"hljs-keyword\">out<\/span> i) {...}\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"c-expression-level-preferences\">C# expression-level preferences<\/h4>\n<p>This style rule concerns using the\u00a0<a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/programming-guide\/statements-expressions-operators\/default-value-expressions#default-literal-and-type-inference\">default literal for default value expressions<\/a>\u00a0when the compiler can infer the type of the expression.<\/p>\n<ul>\n<li>Prefer\u00a0<em><code>default<\/code><\/em>\u00a0over\u00a0<em><code>default(T)<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">DoWork<\/span>(<span class=\"hljs-params\">CancellationToken cancellationToken = <span class=\"hljs-keyword\">default<\/span><\/span>) <\/span>{ ... }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">DoWork<\/span>(<span class=\"hljs-params\">CancellationToken cancellationToken = <span class=\"hljs-keyword\">default<\/span>(CancellationToken<\/span>)) <\/span>{   ... }\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"c-null-checking-preferences\">C# null-checking preferences<\/h4>\n<p>These style rules concern the syntax around null checking, including using throw expressions or throw statements, and whether to perform a null check or use the conditional coalescing operator (?.) when invoking a\u00a0<a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/lambda-expressions\">lambda expression<\/a>.<\/p>\n<ul>\n<li>Prefer to use throw expressions instead of throw statements\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">this<\/span>.s = s ?? <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> ArgumentNullException(<span class=\"hljs-keyword\">nameof<\/span>(s));\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (s == <span class=\"hljs-literal\">null<\/span>) { <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> ArgumentNullException(<span class=\"hljs-keyword\">nameof<\/span>(s)); }\r\n<span class=\"hljs-keyword\">this<\/span>.s = s;\r\n<\/code><\/pre>\n<\/li>\n<li>Refer to use the conditional coalescing operator (?.) when invoking a lambda expression, instead of performing a null check\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nfunc?.Invoke(args);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (func != <span class=\"hljs-literal\">null<\/span>) { func(args); }\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"code-block-preferences\">Code block preferences<\/h4>\n<p>This style rule concerns the use of curly braces { } to surround code blocks.<\/p>\n<ul>\n<li>Prefer no curly braces if allowed\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (test) <span class=\"hljs-keyword\">this<\/span>.Display();\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (test) { <span class=\"hljs-keyword\">this<\/span>.Display(); }\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h2 id=\"formatting-conventions\">Formatting conventions<\/h2>\n<h3 id=\"net-formatting-settings\">.NET formatting settings<\/h3>\n<h3 id=\"organize-using-directives\">Organize using directives<\/h3>\n<p>These formatting rules concern the sorting and display of\u00a0<em><code>using<\/code><\/em>\u00a0directives and\u00a0<em><code>Imports<\/code><\/em>\u00a0statements.<\/p>\n<ul>\n<li>Sort System.*\u00a0<em><code>using<\/code><\/em>\u00a0directives alphabetically, and place them before other using directives.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">using<\/span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using<\/span> System.Threading.Tasks;\r\n<span class=\"hljs-keyword\">using<\/span> Octokit;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">using<\/span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using<\/span> Octokit;\r\n<span class=\"hljs-keyword\">using<\/span> System.Threading.Tasks;\r\n<\/code><\/pre>\n<\/li>\n<li>Do not place a blank line between using directive groups.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">using<\/span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using<\/span> System.Threading.Tasks;\r\n<span class=\"hljs-keyword\">using<\/span> Octokit;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">using<\/span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using<\/span> System.Threading.Tasks;\r\n\r\n<span class=\"hljs-keyword\">using<\/span> Octokit;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h3 id=\"c-formatting-settings\">C# formatting settings<\/h3>\n<p>The formatting rules in this section apply only to C# code.<\/p>\n<h4 id=\"new-line-options\">New-line options<\/h4>\n<p>These formatting rules concern the use of new lines to format code.<\/p>\n<ul>\n<li>Require braces to be on a new line for all expressions (&#8220;Allman&#8221; style).\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">MyMethod<\/span>()\r\n<\/span>{\r\n    <span class=\"hljs-keyword\">if<\/span> (...)\r\n    {\r\n        ...\r\n    }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">MyMethod<\/span>() <\/span>{\r\n    <span class=\"hljs-keyword\">if<\/span> (...) {\r\n        ...\r\n    }\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Place else statements on a new line.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (...) \r\n{\r\n    ...\r\n}\r\n<span class=\"hljs-keyword\">else<\/span> \r\n{\r\n    ...\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">if<\/span> (...) {\r\n    ...\r\n} <span class=\"hljs-keyword\">else<\/span> {\r\n    ...\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Place catch statements on a new line.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">try<\/span> \r\n{\r\n    ...\r\n}\r\n<span class=\"hljs-keyword\">catch<\/span> (Exception e) \r\n{\r\n    ...\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n    ...\r\n} <span class=\"hljs-keyword\">catch<\/span> (Exception e) {\r\n    ...\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Require finally statements to be on a new line after the closing brace.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">try<\/span> \r\n{\r\n    ...\r\n}\r\n<span class=\"hljs-keyword\">catch<\/span> (Exception e) \r\n{\r\n    ...\r\n}\r\n<span class=\"hljs-keyword\">finally<\/span> \r\n{\r\n    ...\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n    ...\r\n} <span class=\"hljs-keyword\">catch<\/span> (Exception e) {\r\n    ...\r\n} <span class=\"hljs-keyword\">finally<\/span> {\r\n    ...\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Require members of object initializers to be on separate lines\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> z = <span class=\"hljs-keyword\">new<\/span> B()\r\n{\r\n    A = <span class=\"hljs-number\">3<\/span>,\r\n    B = <span class=\"hljs-number\">4<\/span>\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> z = <span class=\"hljs-keyword\">new<\/span> B()\r\n{\r\n    A = <span class=\"hljs-number\">3<\/span>, B = <span class=\"hljs-number\">4<\/span>\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Require members of anonymous types to be on separate lines\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> z = <span class=\"hljs-keyword\">new<\/span>\r\n{\r\n    A = <span class=\"hljs-number\">3<\/span>,\r\n    B = <span class=\"hljs-number\">4<\/span>\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> z = <span class=\"hljs-keyword\">new<\/span>\r\n{\r\n    A = <span class=\"hljs-number\">3<\/span>, B = <span class=\"hljs-number\">4<\/span>\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Require elements of query expression clauses to be on separate lines\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> q = <span class=\"hljs-keyword\">from<\/span> a <span class=\"hljs-keyword\">in<\/span> e\r\n        <span class=\"hljs-keyword\">from<\/span> b <span class=\"hljs-keyword\">in<\/span> e\r\n        <span class=\"hljs-keyword\">select<\/span> a * b;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> q = <span class=\"hljs-keyword\">from<\/span> a <span class=\"hljs-keyword\">in<\/span> e <span class=\"hljs-keyword\">from<\/span> b <span class=\"hljs-keyword\">in<\/span> e\r\n        <span class=\"hljs-keyword\">select<\/span> a * b;\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"indentation-options\">Indentation options<\/h4>\n<p>These formatting rules concern the use of indentation to format code.<\/p>\n<ul>\n<li>Indent\u00a0<em><code>switch<\/code><\/em>\u00a0case contents\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">switch<\/span>(c) \r\n{\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Red:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is red\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Blue:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is blue\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">default<\/span>:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is unknown.\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">switch<\/span>(c) {\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Red:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is red\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Blue:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is blue\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">default<\/span>:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is unknown.\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Indent\u00a0<em><code>switch<\/code><\/em>\u00a0labels\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">switch<\/span>(c) \r\n{\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Red:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is red\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">case<\/span> Color.Blue:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is blue\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n    <span class=\"hljs-keyword\">default<\/span>:\r\n        Console.WriteLine(<span class=\"hljs-string\">\"The color is unknown.\"<\/span>);\r\n        <span class=\"hljs-keyword\">break<\/span>;\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">switch<\/span>(c) {\r\n<span class=\"hljs-keyword\">case<\/span> Color.Red:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is red\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n<span class=\"hljs-keyword\">case<\/span> Color.Blue:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is blue\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n<span class=\"hljs-keyword\">default<\/span>:\r\n    Console.WriteLine(<span class=\"hljs-string\">\"The color is unknown.\"<\/span>);\r\n    <span class=\"hljs-keyword\">break<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Labels are placed at the same indent as the current context\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span>\r\n{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">string<\/span> <span class=\"hljs-title\">MyMethod<\/span>(<span class=\"hljs-params\">...<\/span>)\r\n    <\/span>{          \r\n        <span class=\"hljs-keyword\">if<\/span> (...) \r\n        {\r\n            <span class=\"hljs-keyword\">goto<\/span> error;\r\n        }\r\n        error:\r\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> Exception(...);\r\n    }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span>\r\n{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">string<\/span> <span class=\"hljs-title\">MyMethod<\/span>(<span class=\"hljs-params\">...<\/span>)\r\n    <\/span>{\r\n        <span class=\"hljs-keyword\">if<\/span> (...) {\r\n            <span class=\"hljs-keyword\">goto<\/span> error;\r\n        }\r\nerror:\r\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> Exception(...);\r\n    }\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span>\r\n{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">string<\/span> <span class=\"hljs-title\">MyMethod<\/span>(<span class=\"hljs-params\">...<\/span>)\r\n    <\/span>{\r\n        <span class=\"hljs-keyword\">if<\/span> (...) {\r\n            <span class=\"hljs-keyword\">goto<\/span> error;\r\n        }\r\n    error:\r\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> Exception(...);\r\n    }\r\n}\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"spacing-options\">Spacing options<\/h4>\n<p>These formatting rules concern the use of space characters to format code.<\/p>\n<ul>\n<li>Remove space between the cast and the value\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> y = (<span class=\"hljs-keyword\">int<\/span>)x;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> y = (<span class=\"hljs-keyword\">int<\/span>) x;\r\n<\/code><\/pre>\n<\/li>\n<li>Place a space character after a keyword in a control flow statement such as a\u00a0<em><code>for<\/code><\/em>\u00a0loop\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">int<\/span> i;i&lt;x;i++) { ... }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">for<\/span>(<span class=\"hljs-keyword\">int<\/span> i;i&lt;x;i++) { ... }\r\n<\/code><\/pre>\n<\/li>\n<li>Place a space character before the colon for bases or interfaces in a type declaration\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span> : <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span>: <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Place a space character after the colon for bases or interfaces in a type declaration\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span> : <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n\r\n<span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">C<\/span> :<span class=\"hljs-title\">I<\/span>\r\n{\r\n\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Insert space before and after the binary operator\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">return<\/span> x * (x - y);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">return<\/span> x*(x-y);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">return<\/span> x  *  (x-y);\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Bark<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>) <\/span>{ ... }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Bark<\/span>(<span class=\"hljs-params\"> <span class=\"hljs-keyword\">int<\/span> x <\/span>) <\/span>{ ... }\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space within empty parameter list parentheses for a method declaration\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>()\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo();\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>( )\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo();\r\n}\r\n\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space characters between the method name and opening parenthesis in the method declaration\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">M<\/span>() <\/span>{ }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">M<\/span> () <\/span>{ }\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space characters after the opening parenthesis and before the closing parenthesis of a method call\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\nMyMethod(argument);\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\nMyMethod( argument );\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space within empty argument list parentheses\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>()\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo();\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>()\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo( );\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space between method call name and opening parenthesis\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>()\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo();\r\n}\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>()\r\n<\/span>{\r\n    Goo(<span class=\"hljs-number\">1<\/span>);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Goo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> x<\/span>)\r\n<\/span>{\r\n    Goo ();\r\n}\r\n<\/code><\/pre>\n<\/li>\n<li>Insert space after a comma\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] x = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] x = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">3<\/span>,<span class=\"hljs-number\">4<\/span>,<span class=\"hljs-number\">5<\/span> }\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space before a comma\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] x = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] x = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span> , <span class=\"hljs-number\">2<\/span> , <span class=\"hljs-number\">3<\/span> , <span class=\"hljs-number\">4<\/span> , <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<\/li>\n<li>Insert space after each semicolon in a for statement\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; x.Length; i++)\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span>;i &lt; x.Length;i++)\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space before each semicolon in a for statement\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; x.Length; i++)\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span> ; i &lt; x.Length ; i++)\r\n<\/code><\/pre>\n<\/li>\n<li>Remove extra space characters in declaration statements\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> x = <span class=\"hljs-number\">0<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>    x    =    <span class=\"hljs-number\">0<\/span>   ;\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space before opening square brackets\u00a0<em><code>[<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] numbers = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> [] numbers = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span> [] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space between empty square brackets\u00a0<em><code>[]<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[] numbers = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span>[ ] numbers = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-keyword\">int<\/span>[ ] { <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span> };\r\n<\/code><\/pre>\n<\/li>\n<li>Remove space characters in non-empty square brackets\u00a0<em><code>[0]<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> index = numbers[<span class=\"hljs-number\">0<\/span>];\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> index = numbers[ <span class=\"hljs-number\">0<\/span> ];\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h4 id=\"wrap-options\">Wrap options<\/h4>\n<p>These formatting rules concern the use of single lines versus separate lines for statements and code blocks.<\/p>\n<ul>\n<li>Leave statements and member declarations on different lines\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span>;\r\n<span class=\"hljs-keyword\">string<\/span> name = <span class=\"hljs-string\">\"John\"<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">int<\/span> i = <span class=\"hljs-number\">0<\/span>; <span class=\"hljs-keyword\">string<\/span> name = <span class=\"hljs-string\">\"John\"<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Leave code block on single line\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> Foo { <span class=\"hljs-keyword\">get<\/span>; <span class=\"hljs-keyword\">set<\/span>; }\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> MyProperty\r\n{\r\n    <span class=\"hljs-keyword\">get<\/span>; <span class=\"hljs-keyword\">set<\/span>;\r\n}\r\n<\/code><\/pre>\n<\/li>\n<\/ul>\n<h2 id=\"naming-conventions\">Naming conventions<\/h2>\n<ul>\n<li>Constants are named only in capital letters with a delimiter\u00a0<em><code>_<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> <span class=\"hljs-keyword\">int<\/span> TEST_CONSTANT = <span class=\"hljs-number\">1<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> <span class=\"hljs-keyword\">int<\/span> Test_Constant = <span class=\"hljs-number\">1<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Fields with\u00a0<em><code>public<\/code><\/em>\u00a0access are referred to as PascalCase notation\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> TestField;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> testField;\r\n<\/code><\/pre>\n<\/li>\n<li>Interface names must be in PascalCase notation and have the prefix\u00a0<em><code>I<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">ITestInterface<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">testInterface<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>The names of classes, structures, methods, enums, events, properties, namespaces, and delegates should be in PascalCase notation\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">SomeClass<\/span>;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">someClass<\/span>;\r\n<\/code><\/pre>\n<\/li>\n<li>Assigned to the parameter of a generic type a descriptive name in the notation PascalCase, unless enough of a letter and a descriptive name has no practical value\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">ISessionChannel<\/span>&lt;<span class=\"hljs-title\">TSession<\/span>&gt; { <span class=\"hljs-comment\">\/*...*\/<\/span> }\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">delegate<\/span> TOutput Converter&lt;TInput, TOutput&gt;(TInput <span class=\"hljs-keyword\">from<\/span>);\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">List<\/span>&lt;<span class=\"hljs-title\">T<\/span>&gt; { <span class=\"hljs-comment\">\/*...*\/<\/span> }\r\n<\/code><\/pre>\n<\/li>\n<li>Use the name of the type\u00a0<em><code>T<\/code><\/em>\u00a0parameter for types that contain only a single letter type parameter\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">int<\/span> IComparer&lt;T&gt;() { <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-number\">0<\/span>; }\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">delegate<\/span> <span class=\"hljs-keyword\">bool<\/span> Predicate&lt;T&gt;(T item);\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">struct<\/span> Nullable&lt;T&gt; <span class=\"hljs-keyword\">where<\/span> T : <span class=\"hljs-keyword\">struct<\/span> { <span class=\"hljs-comment\">\/*...*\/<\/span> }\r\n<\/code><\/pre>\n<\/li>\n<li>Use the prefix\u00a0<em><code>T<\/code><\/em>\u00a0for descriptive names of type parameters\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">ISessionChannel<\/span>&lt;<span class=\"hljs-title\">TSession<\/span>&gt;\r\n{\r\n    TSession Session { <span class=\"hljs-keyword\">get<\/span>; }\r\n}\r\n<\/code><\/pre>\n<p>Specify the constraints associated with the type parameter in its name. For example, an\u00a0<em><code>ISession<\/code><\/em>\u00a0constraint parameter may be called\u00a0<em><code>TSession<\/code><\/em>.<\/li>\n<li>Private and protected class fields must begin with the prefix\u00a0<em><code>_<\/code><\/em>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">int<\/span> _testField;\r\n<span class=\"hljs-keyword\">protected<\/span> <span class=\"hljs-keyword\">int<\/span> _testField;\r\n<\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">private<\/span> <span class=\"hljs-keyword\">int<\/span> testField;\r\n<span class=\"hljs-keyword\">protected<\/span> <span class=\"hljs-keyword\">int<\/span> testField;\r\n<\/code><\/pre>\n<\/li>\n<li>All other code elements such as variables, method parameters and class fields (except open ones) are named in camelCase notation.\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Right<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> testVar = <span class=\"hljs-keyword\">new<\/span> Object();\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Foo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> firstParam, <span class=\"hljs-keyword\">string<\/span> secondParam<\/span>)\r\n<\/span><\/code><\/pre>\n<pre><code class=\"lang-csharp hljs\"><span class=\"hljs-comment\">\/\/Wrong<\/span>\r\n<span class=\"hljs-keyword\">var<\/span> TestVar = <span class=\"hljs-keyword\">new<\/span> Object();\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">void<\/span> <span class=\"hljs-title\">Foo<\/span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int<\/span> FirstParam, <span class=\"hljs-keyword\">string<\/span> SecondParam<\/span>)\r\n<\/span><\/code><\/pre>\n<\/li>\n<\/ul>\n<\/article>\n<\/div>\n<div class=\"hidden-sm col-md-2\" role=\"complementary\">\n<div class=\"sideaffix shiftup\">\n<div class=\"contribution\">\n<ul class=\"nav\">\n<li><\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>There are three supported .NET coding convention categories: Language conventions .NET code style settings &#8220;this.&#8221; qualifiers This style rule can be applied to fields, properties, methods, or events. Prefer the code element\u00a0not\u00a0to be prefaced with\u00a0this. Prefer fields\u00a0not\u00a0to be prefaced with\u00a0this. \/\/Right capacity = 0; \/\/Wrong this.capacity = 0; Prefer properties\u00a0not\u00a0to be prefaced with\u00a0this. \/\/Right ID &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/developer-guide\/coding-standards\/\"> <span class=\"screen-reader-text\">Coding standards<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[7],"tags":[8,9],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/92"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=92"}],"version-history":[{"count":3,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/92\/revisions"}],"predecessor-version":[{"id":95,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/92\/revisions\/95"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=92"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=92"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=92"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}