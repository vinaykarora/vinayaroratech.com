{"id":924,"date":"2022-11-29T15:13:38","date_gmt":"2022-11-29T09:43:38","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=924"},"modified":"2022-11-29T15:13:39","modified_gmt":"2022-11-29T09:43:39","slug":"how-to-aws-cognito-login-signup-in-asp-net-core","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet\/how-to-aws-cognito-login-signup-in-asp-net-core\/","title":{"rendered":"How to AWS Cognito Login Signup in ASP.NET Core"},"content":{"rendered":"\n<p>In this article, let&#8217;s look at how we can design and build such an API that encapsulates all of User Identity Management functionalities such as Login..<\/p>\n\n\n\n<h2>Introduction<\/h2>\n\n\n\n<p>AWS Cognito provides OAuth2 auth flows such as Authorization Code where the application can redirect to AWS Cognito hosted login screens where the user credentials are validated against Cognito data store and is redirected to the configured landing pages on the application side with an idToken which represents user authorization.<\/p>\n\n\n\n<p>While it is the most recommended approach for applications, some designs prefer having a layer of their API that would communicate with Cognito for authorization, as a matter of decoupling Cognito with the Client (so as to have flexibility or better control).<\/p>\n\n\n\n<p>In this article, let\u2019s look at how we can design and build such an API that encapsulates all of User Identity Management functionalities such as Login, Signup, Password Reset, Update profile and so on, while internally communicating with Cognito for respective flows.<\/p>\n\n\n\n<p>Keep in mind that to run such an API, we need the API to be deployed in a resource that has all the IAM permissions for Cognito access.<\/p>\n\n\n\n<h2>Features we\u2019ll implement &amp; Getting started<\/h2>\n\n\n\n<p>We shall look at designing our APIs which provide the below features:<\/p>\n\n\n\n<ol><li>Login an existing user with his\/her Email address and Password combination<\/li><li>Signup a new user with his\/her Email address, Name, Phone and Password<\/li><li>Update a logged in user\u2019s profile information<\/li><li>Update a logged in user\u2019s password<\/li><li>Reset a user\u2019s forgotten password based on Email address<\/li><\/ol>\n\n\n\n<p>To get started, let\u2019s create a new AspNetCore project that\u2019d host all of these functionalities.<\/p>\n\n\n\n<p><code>dotnet new mvc --name CognitoUserManager<\/code><\/p>\n\n\n\n<p>I\u2019m creating an MVC application instead of a WebAPI, so that I can also add a layer of UI for testing the functionalities. In the project, I create a Repository class called UserRepository which implements an interface IUserRepository that defines all the functionalities as contracts. This Repository is injected into our API layers or UI layer by means of the inbuilt Dependency Injection.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>namespace CognitoUserManager.Contracts.Repositories\n{\n    public interface IUserRepository\n    {\n        \/* Signup Flow Starts *\/\n        Task&lt;UserSignUpResponse> ConfirmUserSignUpAsync(UserConfirmSignUpRequest request);\n        Task&lt;UserSignUpResponse> CreateUserAsync(UserSignUpRequest request);\n        \/* Signup Flow Ends *\/\n        \n        \/* Change Password Flow *\/\n        Task&lt;BaseResponseRequest> TryChangePasswordAsync(ChangePwdRequest request);\n        \n        \/* Forgot Password Flow Starts *\/\n        Task&lt;InitForgotPwdResponse> TryInitForgotPasswordAsync(InitForgotPwdRequest request);\n        Task&lt;ResetPasswordResponse> TryResetPasswordWithConfirmationCodeAsync(ResetPasswordRequest request);\n        \/* Forgot Password Flow Ends *\/\n        \n        \/* Login Flow Starts *\/\n        Task&lt;AuthResponseRequest> TryLoginAsync(UserLoginRequest request);\n        \/* Login Flow Ends *\/\n        \n        Task&lt;UserSignOutResponse> TryLogOutAsync(UserSignOutRequest request);\n        \n        \/* Update Profile Flow Starts *\/\n        Task&lt;UserProfileResponse> GetUserAsync(string userId);\n        Task&lt;UpdateProfileResponse> UpdateUserAttributesAsync(UpdateProfileRequest request);\n        \/* Update Profile Flow Ends *\/\n    }\n}\n<\/code><\/pre>\n\n\n\n<p>I\u2019ve created individual request and response DTO classes for handling respective data. All the Response classes extend from a BaseResponse class which contains the below attributes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class BaseResponse\n{\n    public bool IsSuccess { get; set; }\n    public string Message { get; set; }\n}\n<\/code><\/pre>\n\n\n\n<p>Before jumping into the implementation, we also need to know what information from Cognito to be configured and used in the API.<\/p>\n\n\n\n<h2>Prerequisites for Accessing AWS Cognito Resources<\/h2>\n\n\n\n<p>To access Cognito, we\u2019d require a UserPool where all the users are stored and an AppClient which is created over this UserPool. We\u2019d also require the Region in which this UserPool resides.<\/p>\n\n\n\n<p>In case if we\u2019re not deploying our application inside an AWS environment we\u2019d also require the credentials of a user who has all the required permissions for accessing the Cognito user pool.<\/p>\n\n\n\n<p>This we call the AccessKey and the SecretKey. We shall store and access all these information inside our appsettings.json (or preferably as Environmental Variables if redeployments are not an option).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"AppConfig\": {\n    \"Region\": \"us-west-2\",\n    \"UserPoolId\": \"us-west-2_aBcDeFgHiJ\",\n    \"AppClientId\": \"Ab12Cd34Ef56Gh78ij90\",\n    \"AccessKeyId\": \"AKIA1234567890\",\n    \"AccessSecretKey\": \"abcdEfghalfheqncoryedofhuehhrh\"\n}\n<\/code><\/pre>\n\n\n\n<p>I\u2019ve configured this configuration section into IOptions so as to access it as an object inside my Repository class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>services.Configure&lt;AppConfig&gt;(Configuration.GetSection(\"AppConfig\"));\nservices.AddScoped&lt;IUserRepository, UserRepository&gt;();\n<\/code><\/pre>\n\n\n\n<p>We\u2019d also require to install the below packages which contain the necessary libraries for communicating with Cognito and working with UserPools based on the requests.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;PackageReference Include=\"Amazon.Extensions.CognitoAuthentication\" Version=\"2.0.3\" \/&gt;\n&lt;PackageReference Include=\"AWSSDK.CognitoIdentityProvider\" Version=\"3.5.1.17\" \/&gt;\n<\/code><\/pre>\n\n\n\n<h2>Implementing UserRepository for Cognito Flows<\/h2>\n\n\n\n<p>Let\u2019s begin by implementing the UserRepository which implements the IUserRepository interface and encapsulates all the user flows. To communicate with cognito we use an instance of the AmazonCognitoIdentityProviderClient which we configure by passing all the cognito details we collected before.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>_cloudConfig = appConfigOptions.Value;\n_provider = new AmazonCognitoIdentityProviderClient(\n                _cloudConfig.AccessKeyId, \n                _cloudConfig.AccessSecretKey, \n                RegionEndpoint.GetBySystemName(_cloudConfig.Region));\n<\/code><\/pre>\n\n\n\n<p>Next we create an instance of CognitoUserPool by passing the AmazonCognitoIdentityProviderClient instance we created before along with few other parameters.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>_userPool = new CognitoUserPool(\n        _cloudConfig.UserPoolId, \n        _cloudConfig.AppClientId, \n        _provider);\n<\/code><\/pre>\n\n\n\n<p>Now that we\u2019re done with our initial setups, let\u2019s jump into action \u2013 implementing these user flows one by one using AWS .NET SDK for Cognito.<\/p>\n\n\n\n<ol><li>Login an existing user with his\/her Email address and Password combination<\/li><li>Signup a new user with his\/her Email address, Name, Phone and Password<\/li><li>Update a logged in user\u2019s profile information<\/li><li>Update a logged in user\u2019s password<\/li><li>Reset a user\u2019s forgotten password based on Email address<\/li><\/ol>\n\n\n\n<h2>Login Flow \u2013 an existing user with Email address and Password<\/h2>\n\n\n\n<p>In this flow, the client passes an Email address and Password to the API which needs to validate this combination against a UserPool. We use a Resource Owner Password Grant (ROPG) type of flow in this, which is called as a Secure Remote Password (SRP) Authentication. We implement this as below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CognitoUser user = new CognitoUser(emailAddress, _cloudConfig.AppClientId, _userPool, _provider);\nInitiateSrpAuthRequest authRequest = new InitiateSrpAuthRequest()\n{\n    Password = password\n};\n\nAuthFlowResponse authResponse = await user.StartWithSrpAuthAsync(authRequest);\n<\/code><\/pre>\n\n\n\n<p>We create an instance of CognitoUser by passing the emailAddress and the instances of CognitoUserPool and AmazonCognitoIdentityProviderClient we created before. Then we call the StartWithSrpAuthAsync() method that takes an instance of InitiateSrpAuthRequest where we pass the password.<\/p>\n\n\n\n<p>This call validates the passed on credentials for any user inside the passed on user pool and returns an AuthFlowResponse.<\/p>\n\n\n\n<p>This response contains an AuthenticationResult, which is an instance of AuthenticationResultType containing the tokens representing the authenticated user. The tokens generated are based on the scope configurations provided while configuring the cognito.<\/p>\n\n\n\n<p>If the user is not authenticated, the method throws a NotAuthorizedException which we can assume that the password combination is wrong.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public async Task&lt;AuthResponseRequest> TryLoginAsync(UserLoginRequest request)\n{\n    try\n    {\n        CognitoUser user = new CognitoUser(\n                emailAddress, \n                _cloudConfig.AppClientId, \n                _userPool, \n                _provider);\n        \n        InitiateSrpAuthRequest authRequest = new InitiateSrpAuthRequest()\n        {\n            Password = password\n        };\n\n        AuthFlowResponse authResponse = await user.StartWithSrpAuthAsync(authRequest);\n        var result = authResponse.AuthenticationResult;\n\n        var authResponseRequest = new AuthResponseRequest();\n        authResponseRequest.EmailAddress = user.UserID;\n        authResponseRequest.UserId = user.Username;\n        authResponseRequest.Tokens = new TokenRequest\n        {\n            IdToken = result.IdToken,\n            AccessToken = result.AccessToken,\n            ExpiresIn = result.ExpiresIn,\n            RefreshToken = result.RefreshToken\n        };\n        \n        authResponseRequest.IsSuccess = true;\n        return authResponseRequest;\n    }\n    catch (UserNotConfirmedException)\n    {\n        \/\/ Occurs if the User has signed up \n        \/\/ but has not confirmed his EmailAddress\n        \/\/ In this block we try sending \n        \/\/ the Confirmation Code again and ask user to confirm\n    }\n    catch (UserNotFoundException)\n    {\n        \/\/ Occurs if the provided emailAddress \n        \/\/ doesn't exist in the UserPool\n        return new AuthResponseRequest\n        {\n            IsSuccess = false,\n            Message = \"EmailAddress not found.\"\n        };\n    }\n    catch (NotAuthorizedException)\n    {\n        return new AuthResponseRequest\n        {\n            IsSuccess = false,\n            Message = \"Incorrect username or password\"\n        };\n    }\n}\n<\/code><\/pre>\n\n\n\n<h2>Signup Flow \u2013 a new user with his\/her Email address, Name, Phone and Password<\/h2>\n\n\n\n<p>To let a new user signup, we need to follow a two step process:<\/p>\n\n\n\n<ol><li>Create a new User in Cognito \u2013 this leaves the user in a NotConfirmed state<\/li><li>Confirm the User by passing the Confirmation Code that is sent to the user\u2019s primary source (EmailAddress in our case).<\/li><\/ol>\n\n\n\n<p>Creating a user is a straight forward process, where we pass the EmailAddress, Password and other information such as Name, PhoneNumber and so on as OpenID attributes to the AmazonCognitoIdentityProviderClient instance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public async Task&lt;UserSignUpResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken)\r\n    {\r\n        _logger.LogInformation(\"Create user {0}.\", request.Email);\r\n\r\n        var validator = new CreateUserRequestValidator(_repository, _validatorLocalizer);\r\n        await validator.ValidateAndThrowAsync(request, cancellationToken: cancellationToken);\r\n\r\n        var agency = await _agencyRepository.GetByIdAsync(request.AgencyId, cancellationToken);\r\n\r\n        _ = agency ?? throw new NotFoundException(string.Format(_localizer&#91;\"agency.notfound\"], request.AgencyId));\r\n\r\n        if (agency.Name.Equals(\"Tonkin\", StringComparison.InvariantCultureIgnoreCase))\r\n            request.UserType = Domain.Common.UserType.Tonkin;\r\n\r\n        var user = new ApplicationUser(\r\n        request.AgencyId,\r\n        request.UserType,\r\n        request.FirstName,\r\n        request.LastName,\r\n        request.Email);\r\n        await _repository.AddAsync(user, cancellationToken);\r\n\r\n        var signUpRequest = new SignUpRequest\r\n        {\r\n            ClientId = _myApiCredentials.AppClientId,\r\n            Password = \"Password@1122\",\r\n            Username = request.Email,\r\n            SecretHash = CognitoHashCalculator.GetSecretHash(request.Email, _myApiCredentials.AppClientId, _myApiCredentials.AppClientSecret),\r\n        };\r\n\r\n        signUpRequest.UserAttributes.AddRange(new&#91;]\r\n        {\r\n            new AttributeType { Name = \"email\", Value = request.Email },\r\n            new AttributeType { Value = request.FirstName, Name = \"given_name\" },\r\n            new AttributeType { Value = $\"{request.FirstName} {request.LastName}\", Name = \"family_name\" }\r\n        });\r\n\r\n        try\r\n        {\r\n            var response = await _provider.SignUpAsync(signUpRequest, cancellationToken);\r\n\r\n            return new UserSignUpResponse\r\n            {\r\n                UserId = user.Id,\r\n                UserSub = response.UserSub,\r\n                Email = request.Email,\r\n                IsSuccess = true,\r\n                Message = $\"Confirmation Code sent to {response.CodeDeliveryDetails.Destination} via {response.CodeDeliveryDetails.DeliveryMedium.Value}\",\r\n            };\r\n        }\r\n        catch (UsernameExistsException)\r\n        {\r\n            return new UserSignUpResponse\r\n            {\r\n                IsSuccess = false,\r\n                Message = \"Email Already Exists\"\r\n            };\r\n        }\r\n    }<\/code><\/pre>\n\n\n\n<p>The SignUpResponse returned by the Cognito CreateUserAsync() method contains the details about where the Confirmation Code has been sent to. The Destination property of the CodeDeliveryDetails contains a masked EmailAddress (or PhoneNumber) to where the code is sent. The next step is to post this Confirmation Code sent by the user to Cognito to as to \u201cConfirm\u201d the user.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> public async Task&lt;UserSignUpResponse> ConfirmUserSignUpAsync(UserConfirmSignUpRequest request, CancellationToken cancellationToken)\r\n    {\r\n        var confirmRequest = new ConfirmSignUpRequest\r\n        {\r\n            ClientId = _myApiCredentials.AppClientId,\r\n            ConfirmationCode = request.Code,\r\n            Username = request.Email,\r\n            SecretHash = CognitoHashCalculator.GetSecretHash(request.Email, _myApiCredentials.AppClientId, _myApiCredentials.AppClientSecret),\r\n        };\r\n\r\n        try\r\n        {\r\n            _ = await _provider.ConfirmSignUpAsync(confirmRequest, cancellationToken);\r\n            return new UserSignUpResponse\r\n            {\r\n                Email = request.Email,\r\n                UserId = request.UserId,\r\n                Message = \"User Confirmed\",\r\n                IsSuccess = true\r\n            };\r\n        }\r\n        catch (CodeMismatchException)\r\n        {\r\n            return new UserSignUpResponse\r\n            {\r\n                IsSuccess = false,\r\n                Message = \"Invalid Confirmation Code\",\r\n                Email = request.Email\r\n            };\r\n        }\r\n    }\n<\/code><\/pre>\n\n\n\n<p>Here we post the confirmation code for the respective EmailAddress related to the AppClientId and call the ConfirmSignUpAsync() method on the client.<\/p>\n\n\n\n<p>A successful confirmation means no Exception and we can safely ask the user to login. If the confirmation code is wrong, the method throws a CodeMismatchException.<\/p>\n\n\n\n<p>if Amazon.CognitoIdentityProvider.Model.NotAuthorizedException throw. i.e. &#8216;Client abcded8uek12di4ftcj0cv7btt is configured for secret but secret was not received. Use the below CognitoHashCalculator method in request payload.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static class CognitoHashCalculator\r\n{\r\n    public static string GetSecretHash(string username, string appClientId, string appSecretKey)\r\n    {\r\n        var dataString = username + appClientId;\r\n\r\n        var data = Encoding.UTF8.GetBytes(dataString);\r\n        var key = Encoding.UTF8.GetBytes(appSecretKey);\r\n\r\n        return Convert.ToBase64String(HmacSHA256(data, key));\r\n    }\r\n\r\n    public static byte&#91;] HmacSHA256(byte&#91;] data, byte&#91;] key)\r\n    {\r\n        using var shaAlgorithm = new System.Security.Cryptography.HMACSHA256(key);\r\n        var result = shaAlgorithm.ComputeHash(data);\r\n        return result;\r\n    }\r\n}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>In this article, let&#8217;s look at how we can design and build such an API that encapsulates all of User Identity Management functionalities such as Login.. Introduction AWS Cognito provides OAuth2 auth flows such as Authorization Code where the application can redirect to AWS Cognito hosted login screens where the user credentials are validated against &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to-aws-cognito-login-signup-in-asp-net-core\/\"> <span class=\"screen-reader-text\">How to AWS Cognito Login Signup in ASP.NET Core<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1,5,79,13],"tags":[76,59,83],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/924"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=924"}],"version-history":[{"count":1,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/924\/revisions"}],"predecessor-version":[{"id":925,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/924\/revisions\/925"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=924"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=924"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=924"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}