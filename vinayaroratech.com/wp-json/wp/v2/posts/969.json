{"id":969,"date":"2023-01-18T23:46:20","date_gmt":"2023-01-18T18:16:20","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=969"},"modified":"2023-01-18T23:46:22","modified_gmt":"2023-01-18T18:16:22","slug":"securing-blazor-webassembly-apps","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet\/securing-blazor-webassembly-apps\/","title":{"rendered":"Securing Blazor Webassembly Apps"},"content":{"rendered":"\n<p>Blazor allows you to build your WebAssembly (also known as WASM) applications by leveraging the .NET platform. Thanks to&nbsp;<a href=\"http:\/\/auth0.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Auth0<\/a>, you can also easily secure them by adding support for authentication and authorization, as this article will show. Let&#8217;s start!<\/p>\n\n\n\n<h2 id=\"Building-a-Blazor-WebAssembly-Application\">Building a Blazor WebAssembly Application<\/h2>\n\n\n\n<p>In a previous article, you built&nbsp;<a href=\"https:\/\/auth0.com\/blog\/what-is-blazor-tutorial-on-building-webapp-with-authentication\/\" target=\"_blank\" rel=\"noreferrer noopener\">a Blazor application by using the Server Hosting model<\/a>. It was a simple quiz application that shows a list of questions with multiple answers and assigns you a score based on the correct answers you provide.<\/p>\n\n\n\n<p>Now you are going to implement the same application by using the WebAssembly hosting model. To learn more&nbsp;<a href=\"https:\/\/auth0.com\/blog\/what-is-blazor-tutorial-on-building-webapp-with-authentication\/#What-is-Blazor-\" target=\"_blank\" rel=\"noreferrer noopener\">about Blazor hosting models<\/a>, please check out the specific section in that mentioned article.<\/p>\n\n\n\n<p>As explained in that article, the WebAssembly hosting model makes your application be compiled in WebAssembly and run in your browser. However, depending on the structure of your project, you have two options to create your application:<\/p>\n\n\n\n<ul><li>You may have just the client-side application that will call an existing Web API<\/li><li>You may have both the client-side application and the Web API application. In this case, the Web API application also serves the Blazor WebAssembly app to the browsers. This option is called&nbsp;<em>ASP.NET Core hosted<\/em>.<\/li><\/ul>\n\n\n\n<p>For this project, you will choose the second option. In fact, you will have the client-side application, which will be responsible for showing the UI and managing the user interaction, and the Web API application, which will provide the quiz to the client.<\/p>\n\n\n\n<p>To build this application, you need\u00a0<a href=\"https:\/\/dotnet.microsoft.com\/en-us\/download\/dotnet\/7.0\" target=\"_blank\" rel=\"noreferrer noopener\">.NET 7.0 SDK<\/a>\u00a0or above installed on your machine.<\/p>\n\n\n\n<p>You create a new Blazor WebAssembly project by typing the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet new blazorwasm -o QuizManagerClientHosted --hosted<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note<\/strong>: If you want to create only the client-side application, you have to omit the&nbsp;<code>--hosted<\/code>&nbsp;flag in the previous command.<\/p><\/blockquote>\n\n\n\n<p>If you take a look at the&nbsp;<code>QuizManagerClientHosted<\/code>&nbsp;folder, you will find the folder structure shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>QuizManagerClientHosted\n\u2502   .gitignore\n\u2502   QuizManagerClientHosted.sln    \n\u251c\u2500\u2500 Client\n\u251c\u2500\u2500 Server\n\u2514\u2500\u2500 Shared<\/code><\/pre>\n\n\n\n<p>Each of these folders contains a .NET project. While the&nbsp;<code>Client<\/code>&nbsp;and the&nbsp;<code>Server<\/code>&nbsp;folders are straightforward, you may wonder what the&nbsp;<code>Shared<\/code>&nbsp;folder contains. It contains a class library project with the code shared by the client-side and the server-side applications. In the case of the application you are going to re-implement, it will contain the data model.<\/p>\n\n\n\n<p>So, move into the&nbsp;<code>Shared<\/code>&nbsp;folder and remove the&nbsp;<code>WeatherForecasts.cs<\/code>&nbsp;file. Create a new file in the&nbsp;<code>Shared<\/code>&nbsp;folder called&nbsp;<code>QuizItem.cs<\/code>&nbsp;with the following content:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Shared\/QuizItem.cs\n\nnamespace QuizManagerClientHosted.Shared;\npublic class QuizItem\n{\n  public string Question { get; set; }\n  public List&lt;string&gt; Choices { get; set; }\n  public int AnswerIndex { get; set; }\n  public int Score { get; set; }\n\n  public QuizItem()\n  {\n    Choices = new List&lt;string&gt;();\n  }\n}<\/code><\/pre>\n\n\n\n<p>This class implements the model for each item of the quiz. It provides a question, a list of possible answers, the zero-based index of the correct answer, and the score assigned when the user gives the correct answer.<\/p>\n\n\n\n<h3 id=\"Creating-the-server\">Creating the server<\/h3>\n\n\n\n<p>Move in the&nbsp;<code>Server\/Controllers<\/code>&nbsp;folder and remove the&nbsp;<code>WeatherForecastController.cs<\/code>&nbsp;file. Then, add in the same folder a new file named&nbsp;<code>QuizController.cs<\/code>&nbsp;and put the following code inside it:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Server\/Controllers\/QuizController.cs\n\nusing QuizManagerClientHosted.Shared;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace QuizManagerClientHosted.Server.Controllers;\n\n&#91;ApiController]\n&#91;Route(\"&#91;controller]\")]\npublic class QuizController : ControllerBase\n{\n  private static readonly List&lt;QuizItem&gt; Quiz = new List&lt;QuizItem&gt; {\n    new QuizItem\n      {\n        Question = \"Which of the following is the name of a Leonardo da Vinci's masterpiece?\",\n        Choices = new List&lt;string&gt; {\"Sunflowers\", \"Mona Lisa\", \"The Kiss\"},\n        AnswerIndex = 1,\n        Score = 3\n      },\n    new QuizItem\n      {\n        Question = \"Which of the following novels was written by Miguel de Cervantes?\",\n        Choices = new List&lt;string&gt; {\"The Ingenious Gentleman Don Quixote of La Mancia\", \"The Life of Gargantua and of Pantagruel\", \"One Hundred Years of Solitude\"},\n        AnswerIndex = 0,\n        Score = 5\n      }\n    };\n\n  &#91;HttpGet]\n  public List&lt;QuizItem&gt; Get()\n  {\n    return Quiz;\n  }\n}<\/code><\/pre>\n\n\n\n<p>As you can see, this is the Web API version of the&nbsp;<code>QuizService<\/code>&nbsp;class you created in&nbsp;<a href=\"https:\/\/auth0.com\/blog\/what-is-blazor-tutorial-on-building-webapp-with-authentication\" target=\"_blank\" rel=\"noreferrer noopener\">the Blazor server application<\/a>. You notice the initialization of the&nbsp;<code>Quiz<\/code>&nbsp;static variable with a few&nbsp;<code>QuizItem<\/code>&nbsp;instances and the definition of the&nbsp;<code>Get()<\/code>&nbsp;action returning that variable.<\/p>\n\n\n\n<p>For more information on&nbsp;<a href=\"https:\/\/auth0.com\/blog\/building-aspnet-web-api\/\" target=\"_blank\" rel=\"noreferrer noopener\">how to create a Web API in ASP.NET Core, see this tutorial<\/a>.<\/p>\n\n\n\n<h3 id=\"Creating-the-client\">Creating the client<\/h3>\n\n\n\n<p>In order to create the Blazor client application, move into the&nbsp;<code>Client\/Pages<\/code>&nbsp;folder and remove the&nbsp;<code>Counter.razor<\/code>&nbsp;and the&nbsp;<code>FetchData.razor<\/code>&nbsp;files. Then, add to this folder a file named&nbsp;<code>QuizViewer.razor<\/code>&nbsp;with the following content:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Client\/Pages\/QuizViewer.cs\n\n@page \"\/quizViewer\"\n@using QuizManagerClientHosted.Shared\n@inject HttpClient Http\n\n&lt;h1&gt;Take your quiz!&lt;\/h1&gt;\n&lt;p&gt;Your current score is @currentScore&lt;\/p&gt;\n\n@if (quiz == null)\n{\n  &lt;p&gt;&lt;em&gt;Loading...&lt;\/em&gt;&lt;\/p&gt;\n}\nelse\n{\n  int quizIndex = 0;\n  @foreach (var quizItem in quiz)\n  {\n    &lt;section&gt;\n    &lt;h3&gt;@quizItem.Question&lt;\/h3&gt;\n    &lt;div class=\"form-check\"&gt;\n      @{\n        int choiceIndex = 0;\n        quizScores.Add(0);\n      }\n      @foreach (var choice in quizItem.Choices)\n      {\n        int currentQuizIndex = quizIndex;\n        &lt;input class=\"form-check-input\"\n          type=\"radio\" \n          name=\"@quizIndex\" \n          value=\"@choiceIndex\"\n          @onchange=\"@((eventArgs) =&gt; UpdateScore(Convert.ToInt32(eventArgs.Value), currentQuizIndex))\" \/&gt;@choice\n        &lt;br&gt;\n\n        choiceIndex++;\n      }\n    &lt;\/div&gt;\n    &lt;\/section&gt;\n\n    quizIndex++;\n  }\n}\n\n@code {\n  List&lt;QuizItem&gt; quiz;\n  List&lt;int&gt; quizScores = new List&lt;int&gt;();\n  int currentScore = 0;\n\n  protected override async Task OnInitializedAsync()\n  {\n    quiz = await Http.GetFromJsonAsync&lt;List&lt;QuizItem&gt;&gt;(\"Quiz\");\n  }\n\n  void UpdateScore(int chosenAnswerIndex, int quizIndex)\n  {\n    var quizItem = quiz&#91;quizIndex];\n\n    if (chosenAnswerIndex == quizItem.AnswerIndex)\n    {\n      quizScores&#91;quizIndex] = quizItem.Score;\n    }\n    else\n    {\n      quizScores&#91;quizIndex] = 0;\n    }\n    currentScore = quizScores.Sum();\n  }\n}<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>@page<\/code>&nbsp;directive defines this&nbsp;<a href=\"https:\/\/docs.microsoft.com\/en-us\/aspnet\/core\/blazor\/components\" target=\"_blank\" rel=\"noreferrer noopener\">Razor component<\/a>&nbsp;as a page, which is a UI element that is directly reachable through an address (<code>\/quizViewer<\/code>&nbsp;in this case) in the Blazor&#8217;s routing system. Then, you have the&nbsp;<code>@using<\/code>&nbsp;directive, which provides access to the shared data model created above (<code>QuizItem.cs<\/code>). The&nbsp;<code>@inject<\/code>&nbsp;directive asks the dependency injection system to get an instance of the&nbsp;<code>HttpClient<\/code>&nbsp;class.<\/p>\n\n\n\n<p>After these initializations, you find the markup defining the UI. As you can see, this part is a mix of HTML and C# code whose purpose is to build the list of questions with the respective possible answers represented as radio buttons.<\/p>\n\n\n\n<p>The final block of the component is enclosed in the&nbsp;<code>@code<\/code>&nbsp;directive. This is where you put the logic of the component. In the case of the&nbsp;<code>QuizViewer<\/code>&nbsp;component, you have the&nbsp;<code>OnInitializedAsync()<\/code>&nbsp;and the&nbsp;<code>UpdateScore()<\/code>&nbsp;methods. The first method is called when the component is initialized, and it basically gets the quiz data by invoking the&nbsp;<code>Quiz<\/code>&nbsp;endpoint of the Web API you created before. The&nbsp;<code>UpdateScore()<\/code>&nbsp;method is called when the user clicks one of the proposed answers, and it updates the list of the assigned scores according to the answer chosen by the user. In the same method, the value of the current score is computed and assigned to the&nbsp;<code>currentScore<\/code>&nbsp;variable. The value of this variable is shown above the list of questions, as you can see in the markup.<\/p>\n\n\n\n<p>To complete your application, replace the content of the&nbsp;<code>NavMenu.razor<\/code>&nbsp;file in the&nbsp;<code>Client\/Shared<\/code>&nbsp;folder with the following code:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Shared\/NavMenu.razor\n\n&lt;div class=\"top-row ps-3 navbar navbar-dark\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"\"&gt;QuizManager&lt;\/a&gt;\n        &lt;button title=\"Navigation menu\" class=\"navbar-toggler\" @onclick=\"ToggleNavMenu\"&gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;\/span&gt;\n        &lt;\/button&gt;\n    &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;div class=\"@NavMenuCssClass\" @onclick=\"ToggleNavMenu\"&gt;\n    &lt;nav class=\"flex-column\"&gt;\n        &lt;div class=\"nav-item px-3\"&gt;\n            &lt;NavLink class=\"nav-link\" href=\"\" Match=\"NavLinkMatch.All\"&gt;\n                &lt;span class=\"oi oi-home\" aria-hidden=\"true\"&gt;&lt;\/span&gt; Home\n            &lt;\/NavLink&gt;\n        &lt;\/div&gt;\n        &lt;div class=\"nav-item px-3\"&gt;\n            &lt;NavLink class=\"nav-link\" href=\"quizViewer\"&gt;\n                &lt;span class=\"oi oi-list-rich\" aria-hidden=\"true\"&gt;&lt;\/span&gt; Quiz\n            &lt;\/NavLink&gt;\n        &lt;\/div&gt;\n    &lt;\/nav&gt;\n&lt;\/div&gt;\n\n@code {\n    private bool collapseNavMenu = true;\n\n    private string? NavMenuCssClass =&gt; collapseNavMenu ? \"collapse\" : null;\n\n    private void ToggleNavMenu()\n    {\n        collapseNavMenu = !collapseNavMenu;\n    }\n}<\/code><\/pre>\n\n\n\n<p>As you may have noticed, this code redefines the navigation menu by removing the default items pointing to the&nbsp;<code>Counter<\/code>&nbsp;and&nbsp;<code>FetchData<\/code>&nbsp;components and including an item to reach the&nbsp;<code>QuizViewer<\/code>&nbsp;component.<\/p>\n\n\n\n<h3 id=\"Running-your-Blazor-WebAssembly-application\">Running your Blazor WebAssembly application<\/h3>\n\n\n\n<p>Your Blazor WebAssembly application is complete and ready to run.<\/p>\n\n\n\n<p>In the root folder of the project, type the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet run --project Server<\/code><\/pre>\n\n\n\n<p>Take a look at your terminal window to get the address your application is listening to. It is in the form&nbsp;<code>https:\/\/localhost:&lt;YOUR_PORT_NUMBER&gt;<\/code>. In my case, I got the address&nbsp;<a href=\"https:\/\/localhost:7291\/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>https:\/\/localhost:7291<\/code><\/a>, and I will refer to it throughout the article.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Starting with .NET 6.0, any ASP.NET project created through a template is assigned a random port between 5000 and 5300 for HTTP and between 7000 and 7300 for HTTPS. See&nbsp;<a href=\"https:\/\/docs.microsoft.com\/en-us\/aspnet\/core\/release-notes\/aspnetcore-6.0?view=aspnetcore-6.0#tgp\" target=\"_blank\" rel=\"noreferrer noopener\">this document<\/a>&nbsp;for more information.<\/p><\/blockquote>\n\n\n\n<p>Pointing your browser to your application&#8217;s address, you should see the following page:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/images.ctfassets.net\/23aumh6u8s0i\/1iuH4fcHt0rA0OoTGUdd9P\/7ea0a59eebc6358e319e9c3f9f0b59ba\/blazor-homepage.png\" alt=\"Blazor App Home page\"\/><\/figure>\n\n\n\n<p>Clicking the Quiz item on the navigation bar, you should be able to take a simple quiz as shown in the following screenshot:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/images.ctfassets.net\/23aumh6u8s0i\/K0RnC5N4WNMdaTd0XA7vS\/d773f4e01e0a6da995e1ab9f612acb71\/blazor-quiz-app.png\" alt=\"Blazor Quiz Page\"\/><\/figure>\n\n\n\n<p>Even if the look and feel of this application is basically the same as&nbsp;<a href=\"https:\/\/auth0.com\/blog\/what-is-blazor-tutorial-on-building-webapp-with-authentication\" target=\"_blank\" rel=\"noreferrer noopener\">the Blazor Server implementation<\/a>, the application architecture is quite different. In this case, you have the client side compiled into WebAssembly and running in your browser, while the server side is running in the built-in Web server. In addition, with this architecture, the client and the server interact with classic HTTP requests. You can check this by analyzing the network traffic with the developer tools of your browser.<\/p>\n\n\n\n<h2 id=\"Registering-the-Blazor-WASM-App-with-Auth0\">Registering the Blazor WASM App with Auth0<\/h2>\n\n\n\n<p>Now that you have the WebAssembly version of the Quiz Manager application, learn how to secure it. You will use&nbsp;<a href=\"https:\/\/auth0.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Auth0<\/a>&nbsp;since it provides an easy way to integrate authentication and authorization without having to deal with the complexity of the underlying technology. To use Auth0, you need to provide some information and configure your application to make the two parties communicate with each other. If you don&#8217;t have an Auth0 account yet, you can&nbsp;<a href=\"https:\/\/auth0.com\/signup\" target=\"_blank\" rel=\"noreferrer noopener\">sign up for a free one right now<\/a>.Try out the most powerful authentication platform for free.<a target=\"_blank\" href=\"https:\/\/auth0.com\/signup?promo=sup&amp;place=in-blog-banner&amp;type=link&amp;text=get-started&amp;origin=blog\" rel=\"noreferrer noopener\">Get started \u2192<\/a><\/p>\n\n\n\n<p>After accessing the&nbsp;<a href=\"https:\/\/manage.auth0.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Auth0 Dashboard<\/a>, move to the&nbsp;<a href=\"https:\/\/manage.auth0.com\/#\/applications\" target=\"_blank\" rel=\"noreferrer noopener\">Applications section<\/a>, and follow these steps:<\/p>\n\n\n\n<ol><li>Click the&nbsp;<em>Create Application<\/em>&nbsp;button.<\/li><li>Provide a friendly name for your application (for example,&nbsp;<em>Quiz Blazor WASM Client<\/em>) and select&nbsp;<em>Single Page Web Applications<\/em>&nbsp;as the application type.<\/li><li>Finally, click the&nbsp;<em>Create<\/em>&nbsp;button.<\/li><\/ol>\n\n\n\n<p>After you register the application, move to the&nbsp;<em>Settings<\/em>&nbsp;tab and take note of your Auth0&nbsp;<strong>Domain<\/strong>&nbsp;and your&nbsp;<strong>Client ID<\/strong>. Then, assign the value&nbsp;<code>https:\/\/localhost:&lt;YOUR_PORT_NUMBER&gt;\/authentication\/login-callback<\/code>&nbsp;to the&nbsp;<em>Allowed Callback URLs<\/em>&nbsp;field and the value&nbsp;<code>https:\/\/localhost:&lt;YOUR_PORT_NUMBER&gt;<\/code>&nbsp;to the&nbsp;<em>Allowed Logout URLs<\/em>&nbsp;field. Replace the&nbsp;<code>&lt;YOUR_PORT_NUMBER&gt;<\/code>&nbsp;placeholder with the actual port number assigned to your application. In my case, those values are&nbsp;<code>https:\/\/localhost:7291\/authentication\/login-callback<\/code>&nbsp;and&nbsp;<code>https:\/\/localhost:7291<\/code>.<\/p>\n\n\n\n<p>The first value tells Auth0 which URL to call back after users authenticate. The second value tells Auth0 which URL users should be redirected to after they log out.<\/p>\n\n\n\n<p>Finally, click the&nbsp;<em>Save Changes<\/em>&nbsp;button to apply them.<\/p>\n\n\n\n<h2 id=\"Adding-Support-for-Authentication\">Adding Support for Authentication<\/h2>\n\n\n\n<p>Now, you need to configure your Blazor project by applying some changes to make it aware of Auth0.<\/p>\n\n\n\n<h3 id=\"Configure-your-Blazor-app\">Configure your Blazor app<\/h3>\n\n\n\n<p>So, move to the&nbsp;<code>Client\/wwwroot<\/code>&nbsp;folder and create an&nbsp;<code>appsettings.json<\/code>&nbsp;file with the following content:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"Auth0\": {\n    \"Authority\": \"https:\/\/&lt;YOUR_AUTH0_DOMAIN&gt;\",\n    \"ClientId\": \"&lt;YOUR_CLIENT_ID&gt;\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>Replace the placeholders&nbsp;<code>&lt;YOUR_AUTH0_DOMAIN&gt;<\/code>&nbsp;and&nbsp;<code>&lt;YOUR_CLIENT_ID&gt;<\/code>&nbsp;with the respective values taken from the Auth0 dashboard.<\/p>\n\n\n\n<h3 id=\"Add-support-for-authentication\">Add support for authentication<\/h3>\n\n\n\n<p>Now, add the authentication package to the Blazor client project by running the following command in the&nbsp;<code>Client<\/code>&nbsp;folder:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet add package Microsoft.AspNetCore.Components.WebAssembly.Authentication<\/code><\/pre>\n\n\n\n<p>After adding the package, still in the&nbsp;<code>Client<\/code>&nbsp;folder, edit the&nbsp;<code>Program.cs<\/code>&nbsp;file by changing its content as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Client\/Program.cs\n\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing QuizManagerClientHosted.Client;\n\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add&lt;App&gt;(\"#app\");\nbuilder.RootComponents.Add&lt;HeadOutlet&gt;(\"head::after\");\n\nbuilder.Services.AddScoped(sp =&gt; new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\n\/\/ \ud83d\udc47 new code\nbuilder.Services.AddOidcAuthentication(options =&gt;\n{\n  builder.Configuration.Bind(\"Auth0\", options.ProviderOptions);\n  options.ProviderOptions.ResponseType = \"code\";\n});\n\/\/ \ud83d\udc46 new code\n\nawait builder.Build().RunAsync();<\/code><\/pre>\n\n\n\n<p>You added the call to&nbsp;<code>AddOidcAuthentication()<\/code>&nbsp;with specific options. In particular, you specified using the parameters from the&nbsp;<code>Auth0<\/code>&nbsp;section of the&nbsp;<code>appsettings.json<\/code>&nbsp;configuration file. Also, you specified the type of&nbsp;<a href=\"https:\/\/auth0.com\/docs\/flows\" target=\"_blank\" rel=\"noreferrer noopener\">authentication and authorization flow<\/a>&nbsp;you want to use; in this specific case, the&nbsp;<a href=\"https:\/\/auth0.com\/docs\/flows\/concepts\/auth-code\" target=\"_blank\" rel=\"noreferrer noopener\">Authorization Code flow<\/a>&nbsp;is recommended.<\/p>\n\n\n\n<p>To complete the implementation of authentication support in your application, open the&nbsp;<code>index.html<\/code>&nbsp;file under the&nbsp;<code>Client\/wwwroot<\/code>&nbsp;folder and add the reference to the&nbsp;<code>AuthenticationService.js<\/code>&nbsp;script as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Client\/wwwroot\/index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;!-- existing markup --&gt;\n  &lt;body&gt;\n    &lt;!-- existing markup --&gt;\n    &lt;script src=\"_framework\/blazor.webassembly.js\"&gt;&lt;\/script&gt;\n    &lt;!--\ud83d\udc47 new addition --&gt;\n    &lt;script src=\"_content\/Microsoft.AspNetCore.Components.WebAssembly.Authentication\/AuthenticationService.js\"&gt;&lt;\/script&gt;\n    &lt;!--\ud83d\udc46 new addition --&gt;\n  &lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>This script is responsible for performing the authentication operations on the WebAssembly client side.<\/p>\n\n\n\n<h3 id=\"Adjust-the-UI-of-your-Blazor-app\">Adjust the UI of your Blazor app<\/h3>\n\n\n\n<p>At this point, you prepared the infrastructure for your Blazor app to support authentication. Now you need to make some changes to the UI.<\/p>\n\n\n\n<p>The first step is to enable support for the authorization&nbsp;<a href=\"https:\/\/docs.microsoft.com\/en-us\/aspnet\/core\/blazor\/components\" target=\"_blank\" rel=\"noreferrer noopener\">Razor components<\/a>. So, open the&nbsp;<code>_Imports.razor<\/code>&nbsp;file in the&nbsp;<code>Client<\/code>&nbsp;folder and add a reference to the&nbsp;<code>Microsoft.AspNetCore.Components.Authorization<\/code>&nbsp;and&nbsp;<code>Microsoft.AspNetCore.Authorization<\/code>&nbsp;namespaces. The content of that file will look as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/_Imports.razor *@\n\n@using System.Net.Http\n@using System.Net.Http.Json\n@using Microsoft.AspNetCore.Components.Authorization  \/\/\ud83d\udc48 new addition\n@using Microsoft.AspNetCore.Authorization             \/\/\ud83d\udc48 new addition\n@using Microsoft.AspNetCore.Components.Forms\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.Web\n@using Microsoft.AspNetCore.Components.Web.Virtualization\n@using Microsoft.AspNetCore.Components.WebAssembly.Http\n@using Microsoft.JSInterop\n@using QuizManagerClientHosted.Client\n@using QuizManagerClientHosted.Client.Shared<\/code><\/pre>\n\n\n\n<p>Then, open the&nbsp;<code>App.razor<\/code>&nbsp;file in the same folder and replace its content with the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- Client\/App.razor --&gt;\n\n&lt;CascadingAuthenticationState&gt;\n    &lt;Router AppAssembly=\"@typeof(App).Assembly\"&gt;\n        &lt;Found Context=\"routeData\"&gt;\n            &lt;AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\"&gt;\n                &lt;Authorizing&gt;\n                    &lt;p&gt;Determining session state, please wait...&lt;\/p&gt;\n                &lt;\/Authorizing&gt;\n                &lt;NotAuthorized&gt;\n                    &lt;h1&gt;Sorry&lt;\/h1&gt;\n                    &lt;p&gt;You're not authorized to reach this page. You need to log in.&lt;\/p&gt;\n                &lt;\/NotAuthorized&gt;\n            &lt;\/AuthorizeRouteView&gt;\n            &lt;FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" \/&gt;\n        &lt;\/Found&gt;\n        &lt;NotFound&gt;\n            &lt;PageTitle&gt;Not found&lt;\/PageTitle&gt;\n            &lt;LayoutView Layout=\"@typeof(MainLayout)\"&gt;\n                &lt;p role=\"alert\"&gt;Sorry, there's nothing at this address.&lt;\/p&gt;\n            &lt;\/LayoutView&gt;\n        &lt;\/NotFound&gt;\n    &lt;\/Router&gt;\n&lt;\/CascadingAuthenticationState&gt;<\/code><\/pre>\n\n\n\n<p>You used the&nbsp;<code>AuthorizeRouteView<\/code>&nbsp;Blazor component to customize the content according to the user&#8217;s authentication status. The&nbsp;<code>CascadingAuthenticationState<\/code>&nbsp;component will propagate the current authentication state to the inner components so that they can work on it consistently.<\/p>\n\n\n\n<p>The next step is to create a new&nbsp;<a href=\"https:\/\/docs.microsoft.com\/en-us\/aspnet\/core\/blazor\/components\" target=\"_blank\" rel=\"noreferrer noopener\">Razor component<\/a>&nbsp;that allows the user to log in and see their name when authenticated. So, create a new file named&nbsp;<code>AccessControl.razor<\/code>&nbsp;in the&nbsp;<code>Client\/Shared<\/code>&nbsp;folder with the following content:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/Shared\/AccessControl.razor *@\n\n@using Microsoft.AspNetCore.Components.Authorization\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n\n@inject NavigationManager Navigation\n@inject SignOutSessionStateManager SignOutManager\n\n&lt;AuthorizeView&gt;\n    &lt;Authorized&gt;\n        Hello, @context.User.Identity.Name!\n        &lt;a href=\"#\" @onclick=\"BeginSignOut\"&gt;Log out&lt;\/a&gt;\n    &lt;\/Authorized&gt;\n    &lt;NotAuthorized&gt;\n        &lt;a href=\"authentication\/login\"&gt;Log in&lt;\/a&gt;\n    &lt;\/NotAuthorized&gt;\n&lt;\/AuthorizeView&gt;\n\n@code{\n    private async Task BeginSignOut(MouseEventArgs args)\n    {\n        await SignOutManager.SetSignOutState();\n        Navigation.NavigateTo(\"authentication\/logout\");\n    }\n}<\/code><\/pre>\n\n\n\n<p>The component uses the&nbsp;<code>AuthorizeView<\/code>&nbsp;component to show different content according to the user&#8217;s authentication status. Basically, it shows the&nbsp;<em>Log in<\/em>&nbsp;link when the user is not authenticated. It shows the name of the user and the&nbsp;<em>Log out<\/em>&nbsp;link when the user is authenticated.<\/p>\n\n\n\n<p>Note the URL the user is redirected to when they click the&nbsp;<em>Log out<\/em>&nbsp;link (<code>authentication\/logout<\/code>). You will learn about that URL in a moment.<\/p>\n\n\n\n<p>Now, open the&nbsp;<code>MainLayout.razor<\/code>&nbsp;file in the&nbsp;<code>Shared<\/code>&nbsp;folder and add the&nbsp;<code>AccessControl<\/code>&nbsp;component just before the&nbsp;<em>About<\/em>&nbsp;link. The final code should look like the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/Shared\/MainLayout.razor *@\n\n@inherits LayoutComponentBase\n\n&lt;div class=\"page\"&gt;\n    &lt;div class=\"sidebar\"&gt;\n        &lt;NavMenu \/&gt;\n    &lt;\/div&gt;\n\n    &lt;main&gt;\n        &lt;div class=\"top-row px-4\"&gt;\n            &lt;AccessControl \/&gt;    \/\/\ud83d\udc48 new code\n            &lt;a href=\"https:\/\/docs.microsoft.com\/aspnet\/\" target=\"_blank\"&gt;About&lt;\/a&gt;\n        &lt;\/div&gt;\n\n        &lt;article class=\"content px-4\"&gt;\n            @Body\n        &lt;\/article&gt;\n    &lt;\/main&gt;\n&lt;\/div&gt;<\/code><\/pre>\n\n\n\n<p>When you registered your Blazor app with Auth0, you specified a couple of URLs as the allowed URLs for login callback and logout. To manage these URLs, you need to implement a page responsible for handling different authentication stages. For this purpose, create a new&nbsp;<code>Authentication.razor<\/code>&nbsp;file in the&nbsp;<code>Client\/Pages<\/code>&nbsp;folder with the following code:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/Pages\/Authentication.razor *@\n\n@page \"\/authentication\/{action}\"\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n@using Microsoft.Extensions.Configuration\n\n@inject NavigationManager Navigation\n@inject IConfiguration Configuration\n\n&lt;RemoteAuthenticatorView Action=\"@Action\"&gt;\n    &lt;LogOut&gt;\n        @{\n            var authority = (string)Configuration&#91;\"Auth0:Authority\"];\n            var clientId = (string)Configuration&#91;\"Auth0:ClientId\"];\n\n             Navigation.NavigateTo($\"{authority}\/v2\/logout?client_id={clientId}\");\n        }\n    &lt;\/LogOut&gt;\n&lt;\/RemoteAuthenticatorView&gt;\n\n@code{\n    &#91;Parameter] public string Action { get; set; }\n}<\/code><\/pre>\n\n\n\n<p>As you can see, this component implements a page containing the&nbsp;<code>RemoteAuthenticatorView<\/code>&nbsp;component. This component manages the users&#8217; authentication status and interacts with the authorization server on the Auth0 side. While the login interaction doesn&#8217;t require any specific code, you need to manage the logout transaction. In fact, by design Blazor clears your authentication state on the client side but doesn&#8217;t disconnect you from Auth0. To close your session on the Auth0 side, you need to explicitly call the logout endpoint, as shown in the code above.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Disclaimer: At the time of writing, the logout function seems not to be stable due to an apparently Blazor problem. Check out&nbsp;<a href=\"https:\/\/github.com\/dotnet\/aspnetcore\/issues\/40046\" target=\"_blank\" rel=\"noreferrer noopener\">this issue on the Blazor project&#8217;s repository to learn more<\/a>.<\/p><\/blockquote>\n\n\n\n<p>Finally, you need to add the&nbsp;<code>Authorize<\/code>&nbsp;attribute to the&nbsp;<code>QuizViewer.razor<\/code>&nbsp;page to protect it from unauthorized access. Open the&nbsp;<code>QuizViewer.razor<\/code>&nbsp;file in the&nbsp;<code>Pages<\/code>&nbsp;folder and add the attribute as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/Pages\/QuizViewer.razor *@\n\n@page \"\/quizViewer\"\n@attribute &#91;Authorize]            \/\/\ud83d\udc48 new addition\n\n@using QuizManagerClientHosted.Shared\n\n\/\/ ... exisiting code ...<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note that the presence of the&nbsp;<code>Authorize<\/code>&nbsp;attribute on the page doesn&#8217;t prevent the client from calling the API on the server. You need to protect the API on the server side as well.<\/p><\/blockquote>\n\n\n\n<p>At this point, you can stop your Blazor app, if it is still running, and restart it to test the authentication integration. Once the app is running, by clicking the&nbsp;<em>Quiz<\/em>&nbsp;menu item, you should see the following screen:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/images.ctfassets.net\/23aumh6u8s0i\/7Lwyrds8bai2wl26T63ZlL\/50f3fbda536515d608972fcbf0def159\/blazor-unauthenticated-user.png\" alt=\"Blazor app and the unauthenticated user\"\/><\/figure>\n\n\n\n<p>Note the&nbsp;<em>Log In<\/em>&nbsp;in the upper right corner. By clicking on it, the&nbsp;<a href=\"https:\/\/auth0.com\/docs\/universal-login\" target=\"_blank\" rel=\"noreferrer noopener\">Auth0 Universal Login page<\/a>&nbsp;is shown, and the authentication process takes place. After authentication, you will be able to access the&nbsp;<em>QuizViewer<\/em>&nbsp;page.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 id=\"Securing-the-API-with-Auth0\">Securing the API with Auth0<\/h2>\n\n\n\n<p>The data shown on the&nbsp;<em>QuizViewer<\/em>&nbsp;page are loaded from the&nbsp;<code>\/quiz<\/code>&nbsp;API implemented in the server project. This API is not protected, so any client could access it. In fact, the Blazor WASM client is able to access it without any problem. However, in a production-ready scenario, you need to protect the API to prevent unauthorized access. Although the API security implementation is out of the scope of this tutorial, you need to perform a few changes to the API in the server project to secure it.<\/p>\n\n\n\n<p>If you want to learn more about&nbsp;<a href=\"https:\/\/auth0.com\/blog\/aspnet-web-api-authorization\/\" target=\"_blank\" rel=\"noreferrer noopener\">protecting Web APIs in .NET, please check out this article<\/a>.<\/p>\n\n\n\n<h3 id=\"Register-the-API\">Register the API<\/h3>\n\n\n\n<p>Like what you did with the Blazor WASM application, you need to register the API with Auth0. So, head your browser to the&nbsp;<a href=\"https:\/\/manage.auth0.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Auth0 Dashboard<\/a>, move to the&nbsp;<a href=\"https:\/\/manage.auth0.com\/#\/apis\" target=\"_blank\" rel=\"noreferrer noopener\">API section<\/a>, and follow these steps:<\/p>\n\n\n\n<ol><li>Click the&nbsp;<em>Create API<\/em>&nbsp;button.<\/li><li>Provide a friendly name for your API (for example,&nbsp;<em>Quiz API<\/em>) and a unique identifier (also known as&nbsp;<em>audience<\/em>) in the URL format (for example,&nbsp;<em><a href=\"https:\/\/quizapi.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/quizapi.com<\/a><\/em>).<\/li><li>Leave the signing algorithm to RS256 and click the&nbsp;<em>Create<\/em>&nbsp;button.<\/li><\/ol>\n\n\n\n<p>This way, Auth0 is aware of your Web API and will allow you to control access.<\/p>\n\n\n\n<h3 id=\"Protecting-the-API\">Protecting the API<\/h3>\n\n\n\n<p>In the server project under the&nbsp;<code>Server<\/code>&nbsp;folder, open the&nbsp;<code>appsettings.json<\/code>&nbsp;and modify its content as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"Auth0\": {\n    \"Domain\": \"&lt;YOUR_AUTH0_DOMAIN&gt;\",\n    \"Audience\": \"&lt;YOUR_API_IDENTIFIER&gt;\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>Replace the&nbsp;<code>&lt;YOUR_AUTH0_DOMAIN&gt;<\/code>&nbsp;placeholder with the Auth0 domain value you used for the Blazor WASM client. Also, replace the&nbsp;<code>&lt;YOUR_API_IDENTIFIER&gt;<\/code>&nbsp;placeholder with the unique identifier you defined for your API in the Auth0 Dashboard: it should be&nbsp;<code>https:\/\/quizapi.com<\/code>, if you kept the suggested value.<\/p>\n\n\n\n<p>Still in the&nbsp;<code>Server<\/code>&nbsp;folder, run the following command to install the library that will handle the authorization process:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer<\/code><\/pre>\n\n\n\n<p>Then, open the&nbsp;<code>Program.cs<\/code>&nbsp;file and apply the changes shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Server\/Startup.cs\n\n\/\/ ... exisiting code ...\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\n\/\/\ud83d\udc46 new code\n\nvar builder = WebApplication.CreateBuilder(args);\n\n\/\/ Add services to the container.\n\/\/\ud83d\udc47 new code\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, c =&gt;\n    {\n        c.Authority = $\"https:\/\/{builder.Configuration&#91;\"Auth0:Domain\"]}\";\n        c.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\n        {\n            ValidAudience = builder.Configuration&#91;\"Auth0:Audience\"],\n            ValidIssuer = $\"https:\/\/{builder.Configuration&#91;\"Auth0:Domain\"]}\"\n        };\n    });\n\/\/\ud83d\udc46 new code\n\nbuilder.Services.AddControllersWithViews();\nbuilder.Services.AddRazorPages();\n\nvar app = builder.Build();\n\n\/\/ ... exisiting code ...\n\napp.UseRouting();\n\n\/\/\ud83d\udc47 new code\napp.UseAuthentication();\napp.UseAuthorization();\n\/\/\ud83d\udc46 new code\n\napp.MapRazorPages();\n\n\/\/ ... exisiting code ...<\/code><\/pre>\n\n\n\n<p>You added the reference to the&nbsp;<code>Microsoft.AspNetCore.Authentication.JwtBearer<\/code>&nbsp;namespace and added the statements that configure the server to handle the authorization process through Auth0. Finally, you configured the middleware to process authentication and authorization.<\/p>\n\n\n\n<p>Now, open the&nbsp;<code>QuizController.cs<\/code>&nbsp;file in the&nbsp;<code>Server\/Controllers<\/code>&nbsp;folder and apply the following changes:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Server\/Controllers\/QuizController.cs\n\nusing QuizManagerClientHosted.Shared;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;  \/\/\ud83d\udc48 new addition\n\nnamespace QuizManagerClientHosted.Server.Controllers;\n\n&#91;ApiController]\n&#91;Route(\"&#91;controller]\")]\n&#91;Authorize]            \/\/\ud83d\udc48 new addition\npublic class QuizController : ControllerBase\n{\n  \/\/ ... existing code ...\n}<\/code><\/pre>\n\n\n\n<p>You added the reference to the&nbsp;<code>Microsoft.AspNetCore.Authorization<\/code>&nbsp;namespace and decorated the&nbsp;<code>QuizController<\/code>&nbsp;class with the&nbsp;<code>Authorize<\/code>&nbsp;attribute.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Remember: if you want&nbsp;<a href=\"https:\/\/auth0.com\/blog\/aspnet-web-api-authorization\" target=\"_blank\" rel=\"noreferrer noopener\">to learn in depth how to protect your API with Auth0, read this article<\/a>.<\/p><\/blockquote>\n\n\n\n<p>Now your API is protected. To check if everything is working as expected, move to the root of the project and restart it. Then, log in to the application and click the&nbsp;<em>Quiz<\/em>&nbsp;menu item. This time you shouldn&#8217;t be able to display the quiz data. Your screen should be like the following:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/images.ctfassets.net\/23aumh6u8s0i\/3LvgHWbncfgMgQ8yBlbTl3\/bb53b957ad5581a2acc7b9efa1189162\/blazor-unauthorized-user.png\" alt=\"Blazor app unauthorized to access the API\"\/><\/figure>\n\n\n\n<p>If you take a look at the network section of your browser&#8217;s developer tool, you will find that the call to the&nbsp;<code>\/quiz<\/code>&nbsp;endpoint gets an HTTP 401 status code, as in the following example:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/images.ctfassets.net\/23aumh6u8s0i\/2lsComaCge0ZuDAQa6Pbse\/3e16fdec1aee9233acca9a83b27c519f\/blazor-app-dev-tools.png\" alt=\"Unauthorized error when calling an API\"\/><\/figure>\n\n\n\n<p>This confirms that the server prevents unauthorized access to the API.<\/p>\n\n\n\n<p><a href=\"https:\/\/twitter.com\/intent\/tweet?text=%22Learn%20how%20to%20call%20a%20protected%20API%20with%20Blazor%20WebAssembly.%22%20via%20@auth0%20https:\/\/auth0.com\/blog\/securing-blazor-webassembly-apps\" target=\"_blank\" rel=\"noreferrer noopener\">&#8220;Learn how to call a protected API with Blazor WebAssembly.&#8221;<\/a><a href=\"https:\/\/twitter.com\/intent\/tweet?text=%22Learn%20how%20to%20call%20a%20protected%20API%20with%20Blazor%20WebAssembly.%22%20via%20@auth0%20https:\/\/auth0.com\/blog\/securing-blazor-webassembly-apps\" target=\"_blank\" rel=\"noreferrer noopener\">Tweet This<\/a><\/p>\n\n\n\n<h2 id=\"Calling-the-Protected-API\">Calling the Protected API<\/h2>\n\n\n\n<p>To enable your Blazor WASM application to access the protected API, you need to get an&nbsp;<a href=\"https:\/\/auth0.com\/docs\/tokens\/concepts\/access-tokens\" target=\"_blank\" rel=\"noreferrer noopener\">access token<\/a>&nbsp;from Auth0 and provide it along with your API call. You might think to write some code that attaches this token when you make an HTTP request to the server. However, you can centralize the access token attachment to your API calls in a straightforward way.<\/p>\n\n\n\n<h3 id=\"Creating-the-HTTP-client\">Creating the HTTP client<\/h3>\n\n\n\n<p>Start by moving to the&nbsp;<code>Client<\/code>&nbsp;folder and installing the&nbsp;<code>Microsoft.Extensions.Http<\/code>&nbsp;package with the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet add package Microsoft.Extensions.Http<\/code><\/pre>\n\n\n\n<p>This package allows you to create named HTTP clients and customize their behavior. In your case, you will create an HTTP client that automatically attaches an access token to each HTTP request.<\/p>\n\n\n\n<p>Open the&nbsp;<code>Program.cs<\/code>&nbsp;file in the&nbsp;<code>Client<\/code>&nbsp;folder and add a reference to the&nbsp;<code>Microsoft.AspNetCore.Components.WebAssembly.Authentication<\/code>&nbsp;as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Client\/Program.cs\n\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing QuizManagerClientHosted.Client;\n\/\/\ud83d\udc47 new addition\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication;\n\n\/\/ ... existing code ...<\/code><\/pre>\n\n\n\n<p>In the same file, apply the changes pointed out in the following code snippet:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Client\/Program.cs\n\n\/\/ ... existing code ...\n\nbuilder.RootComponents.Add&lt;HeadOutlet&gt;(\"head::after\");\n\n\/\/\ud83d\udc47 old code\n\/\/builder.Services.AddScoped(sp =&gt; new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\n\/\/\ud83d\udc47 new code\nbuilder.Services.AddHttpClient(\"ServerAPI\", \n      client =&gt; client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress))\n    .AddHttpMessageHandler&lt;BaseAddressAuthorizationMessageHandler&gt;();\n\nbuilder.Services.AddScoped(sp =&gt; sp.GetRequiredService&lt;IHttpClientFactory&gt;()\n  .CreateClient(\"ServerAPI\"));\n\/\/\ud83d\udc46 new code      \n\n\/\/ ... existing code ...<\/code><\/pre>\n\n\n\n<p>You replaced the existing line of code that created an HTTP client with two lines of code. The&nbsp;<code>AddHttpClient()<\/code>&nbsp;method defines a named&nbsp;<code>HttpClient<\/code>&nbsp;instance (<code>ServerAPI<\/code>) with the current server&#8217;s address as the base address to use when requesting a resource. Also, the&nbsp;<code>BaseAddressAuthorizationMessageHandler<\/code>&nbsp;class is added to the&nbsp;<code>HttpClient<\/code>&nbsp;instance as the HTTP message handler. This class is provided by the&nbsp;<code>Microsoft.AspNetCore.Components.WebAssembly.Authentication<\/code>&nbsp;namespace and is responsible for attaching the access token to any HTTP request to the application&#8217;s base URI.<\/p>\n\n\n\n<p>The actual&nbsp;<code>HttpClient<\/code>&nbsp;instance is created by the&nbsp;<code>CreateClient()<\/code>&nbsp;method of the&nbsp;<code>IHttpClientFactory<\/code>&nbsp;service implementation.<\/p>\n\n\n\n<h3 id=\"Specifying-the-API-audience\">Specifying the API audience<\/h3>\n\n\n\n<p>Now, open the&nbsp;<code>appsettings.json<\/code>&nbsp;file in the&nbsp;<code>Client\/wwwroot<\/code>&nbsp;folder and add the&nbsp;<code>Audience<\/code>&nbsp;element as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"Auth0\": {\n    \"Authority\": \"https:\/\/&lt;YOUR_AUTH0_DOMAIN&gt;\",\n    \"ClientId\": \"&lt;YOUR_CLIENT_ID&gt;\",\n    \"Audience\": \"&lt;YOUR_API_IDENTIFIER&gt;\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>Replace the&nbsp;<code>&lt;YOUR_API_IDENTIFIER&gt;<\/code>&nbsp;placeholder with the unique identifier you defined for your API in the Auth0 Dashboard (e.g.,&nbsp;<code>https:\/\/quizapi.com<\/code>).<\/p>\n\n\n\n<p>Now, back in the&nbsp;<code>Client\/Program.cs<\/code>&nbsp;file, apply the change highlighted below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ Client\/Program.cs\n\n\/\/ ... existing code ...\n\nbuilder.Services.AddOidcAuthentication(options =&gt;\n{\n  builder.Configuration.Bind(\"Auth0\", options.ProviderOptions);\n  options.ProviderOptions.ResponseType = \"code\";\n  \/\/\ud83d\udc47 new code\n  options.ProviderOptions.AdditionalProviderParameters.Add(\"audience\", builder.Configuration&#91;\"Auth0:Audience\"]);\n});\n\nawait builder.Build().RunAsync();<\/code><\/pre>\n\n\n\n<p>You added an additional&nbsp;<code>audience<\/code>&nbsp;parameter to let Auth0 know you want to call the API identified by the&nbsp;<code>Audience<\/code>&nbsp;setting value.<\/p>\n\n\n\n<h3 id=\"Making-the-call\">Making the call<\/h3>\n\n\n\n<p>After this global configuration, you can call the&nbsp;<code>quiz<\/code>&nbsp;endpoint of your Web API. So, open the&nbsp;<code>QuizViewer.razor<\/code>&nbsp;file in the&nbsp;<code>Client\\Pages<\/code>&nbsp;folder and change its content as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@* Client\/Pages\/QuizViewer.razor *@\n\n@page \"\/quizViewer\"\n@attribute &#91;Authorize]\n\n@using QuizManagerClientHosted.Shared\n\/\/\ud83d\udc47 new code\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n\/\/\ud83d\udc46 new code\n@inject HttpClient Http\n\n\n\/\/ ... existing code ...\n  \n@code {\n  \n    \/\/ ... existing code ...\n  \n    protected override async Task OnInitializedAsync()\n    {\n        \/\/\ud83d\udc47 changed code\n        try\n        {\n            quiz = await Http.GetFromJsonAsync&lt;List&lt;QuizItem&gt;&gt;(\"quiz\");\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n        \/\/\ud83d\udc46 changed code\n    }\n  \n  \/\/ ... existing code ...\n}<\/code><\/pre>\n\n\n\n<p>You imported the&nbsp;<code>Microsoft.AspNetCore.Components.WebAssembly.Authentication<\/code>&nbsp;namespace. Then, you simply arranged the&nbsp;<code>OnInitializedAsync()<\/code>&nbsp;method by wrapping it with a&nbsp;<em>try-catch<\/em>&nbsp;statement.<\/p>\n\n\n\n<p>After applying these changes, restart your application, log in, and try to move to the Quiz page. This time you should be able to access your protected API and show the Quiz page.<\/p>\n\n\n\n<h2 id=\"Recap\">Recap<\/h2>\n\n\n\n<p>This tutorial guided you in creating and securing a Blazor WebAssembly application by using Auth0. You learned how to build a simple Blazor WebAssembly application and some Razor components. You went through the process of registering your application with Auth0 and enabling it to support authentication. Finally, you protected the API hosted by the server side of your application and called that API passing the access token.<\/p>\n\n\n\n<p>The full source code of the application secured in this tutorial can be downloaded from\u00a0<a href=\"https:\/\/github.com\/vinaykarora\/secure-blazor-wasm-auth0\" target=\"_blank\" rel=\"noreferrer noopener\">this GitHub repository<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Blazor allows you to build your WebAssembly (also known as WASM) applications by leveraging the .NET platform. Thanks to&nbsp;Auth0, you can also easily secure them by adding support for authentication and authorization, as this article will show. Let&#8217;s start! Building a Blazor WebAssembly Application In a previous article, you built&nbsp;a Blazor application by using the &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet\/securing-blazor-webassembly-apps\/\"> <span class=\"screen-reader-text\">Securing Blazor Webassembly Apps<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1,13],"tags":[131,130,128,129],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/969"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=969"}],"version-history":[{"count":1,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/969\/revisions"}],"predecessor-version":[{"id":970,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/969\/revisions\/970"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=969"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=969"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=969"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}