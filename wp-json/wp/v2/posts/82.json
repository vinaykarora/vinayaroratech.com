{"id":82,"date":"2020-05-05T12:07:46","date_gmt":"2020-05-05T12:07:46","guid":{"rendered":"http:\/\/vinayaroratech.com\/?p=82"},"modified":"2021-12-16T21:43:37","modified_gmt":"2021-12-16T16:13:37","slug":"a-successful-git-branching-model","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/github\/a-successful-git-branching-model\/","title":{"rendered":"A successful Git branching strategy"},"content":{"rendered":"<div class=\"application-main \" data-commit-hovercards-enabled=\"\">\n<div class=\"\">\n<div class=\"container-lg clearfix new-discussion-timeline px-3\">\n<div class=\"repository-content \">\n<div id=\"readme\" class=\"Box md js-code-block-container Box--condensed\">\n<div class=\"Box-body p-5\">\n<article class=\"markdown-body entry-content\">In this post I present the git flow release model that I\u2019ve introduced for some of my projects (both at work and private) about a week ago, and which has turned out to be very successful. I\u2019ve been meaning to write about it for a while now, but I\u2019ve never really found the time to do so thoroughly, until now. I won\u2019t talk about any of the projects\u2019 details, merely about the branching strategy and release management.<img loading=\"lazy\" class=\"alignnone wp-image-84 size-full\" src=\"http:\/\/vinayaroratech.com\/wp-content\/uploads\/2020\/05\/Git-Flow-e1588680087165.png\" alt=\"\" width=\"960\" height=\"465\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2020\/05\/Git-Flow-e1588680087165.png 960w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2020\/05\/Git-Flow-e1588680087165-300x145.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2020\/05\/Git-Flow-e1588680087165-768x372.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2020\/05\/Git-Flow-e1588680087165-690x334.png 690w\" sizes=\"(max-width: 960px) 100vw, 960px\" \/><\/p>\n<h1><strong>The two main branches<\/strong><\/h1>\n<ul>\n<li>Master<\/li>\n<li>Develop<\/li>\n<\/ul>\n<p>The\u00a0<code>master<\/code>\u00a0branch at\u00a0<code>origin<\/code>\u00a0should be familiar to every Git user.\u00a0Parallel to the\u00a0<code>master<\/code>\u00a0branch, another branch exists called\u00a0<code>develop<\/code>.<\/p>\n<p>We consider\u00a0<code>origin\/master<\/code>\u00a0to be the main branch where the source code of\u00a0<code>HEAD<\/code>\u00a0always reflects a\u00a0<em>production-ready<\/em>\u00a0state.<\/p>\n<p>We consider\u00a0<code>origin\/develop<\/code>\u00a0to be the main branch where the source code of\u00a0<code>HEAD<\/code>\u00a0always reflects a state with the latest delivered development changes for the next release. Some would call this the \u201cintegration branch\u201d. This is where any automatic nightly builds are built from.<\/p>\n<p>When the source code in the\u00a0<code>develop<\/code>\u00a0branch reaches a stable point and is ready to be released, all of the changes should be merged back into\u00a0<code>master<\/code>\u00a0somehow and then tagged with a release number. How this is done in detail will be discussed further on.<\/p>\n<p>Therefore, each time when changes are merged back into\u00a0<code>master<\/code>, this is a new production release\u00a0<em>by definition<\/em>. We tend to be very strict at this, so that theoretically, we could use a Git hook script to automatically build and roll-out our software to our production servers every time there was a commit on\u00a0<code>master<\/code>.<\/p>\n<h2 id=\"supporting-branches\">Supporting branches<\/h2>\n<p>Next to the main branches\u00a0<code>master<\/code>\u00a0and\u00a0<code>develop<\/code>, our development team uses a variety of supporting branches to aid parallel development between team members, ease tracking of features, prepare for production releases and to assist in quickly fixing live production problems. Unlike the main branches, these branches always have a limited life time, since they will be removed eventually.<\/p>\n<p>The different types of branches we may use are:<\/p>\n<ul>\n<li>Feature branches<\/li>\n<li>Release branches<\/li>\n<li>Hotfix branches<\/li>\n<\/ul>\n<h4 id=\"creating-a-feature-branch\">Steps to follow:<\/h4>\n<p><strong>1. Checked out into develop branch<\/strong><br \/>\ngit checkout develop<\/p>\n<p><strong>2. Fetched all remote updates<\/strong><br \/>\ngit remote update<\/p>\n<p><strong>3. Update local develop branch with remote copy<\/strong><br \/>\ngit pull origin develop<\/p>\n<p><strong>4. Created a release branch that tracks origin\/develop<\/strong><br \/>\ngit checkout -b release\/0.1.0 origin\/develop<\/p>\n<p><strong>5. Pushed release branch to remote repository<\/strong><br \/>\ngit push origin release\/0.1.0<\/p>\n<p><strong>6. Opened a &#8220;pull request&#8221; in GitHub for team to verify the release<\/strong><\/p>\n<p><strong>7. Checkout into master branch<\/strong><br \/>\ngit checkout master<\/p>\n<p><strong>8. Updated local master branch with remote copy<\/strong><br \/>\ngit pull origin master<\/p>\n<p><strong>9. Merged release branch into master branch<\/strong><br \/>\ngit merge release\/0.1.0<\/p>\n<p><strong>10. Tagged the release point by creating a new tag<\/strong><br \/>\ngit tag -a 0.1.0 -m &#8216;Create release tag 0.1.0&#8217;<\/p>\n<p><strong>11. Pushed master branch to remote repository<\/strong><br \/>\ngit push origin master<\/p>\n<p><strong>12. Pushed the tags to remote repository<\/strong><br \/>\ngit push origin &#8211;tags<\/p>\n<p><strong>13. Checkout into develop branch<\/strong><br \/>\ngit checkout develop<\/p>\n<p><strong>14. Merged release branch into develop branch<\/strong><br \/>\ngit merge release\/0.1.0<\/p>\n<p><strong>15. Pushed develop branch to remote repository<\/strong><br \/>\ngit push origin develop<\/p>\n<p><strong>16. Removed release branch from the local repository<\/strong><br \/>\ngit branch -D release\/0.1.0<\/p>\n<p><strong>17. Removed release branch from the remote repository<\/strong><br \/>\ngit push origin :release\/0.1.0<\/p>\n<\/article>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<blockquote><p>Enhanced Git Flow, you can click <a href=\"https:\/\/www.toptal.com\/gitflow\/enhanced-git-flow-explained\">here<\/a>.<\/p><\/blockquote>\n<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this post I present the git flow release model that I\u2019ve introduced for some of my projects (both at work and private) about a week ago, and which has turned out to be very successful. I\u2019ve been meaning to write about it for a while now, but I\u2019ve never really found the time to &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/github\/a-successful-git-branching-model\/\"> <span class=\"screen-reader-text\">A successful Git branching strategy<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/82"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=82"}],"version-history":[{"count":3,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/82\/revisions"}],"predecessor-version":[{"id":852,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/82\/revisions\/852"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=82"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=82"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=82"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}