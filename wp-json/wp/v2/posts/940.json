{"id":940,"date":"2023-01-04T21:09:33","date_gmt":"2023-01-04T15:39:33","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=940"},"modified":"2023-01-04T21:16:13","modified_gmt":"2023-01-04T15:46:13","slug":"examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages\/","title":{"rendered":"Examples of creating base64 hashes using HMAC SHA256 in different languages"},"content":{"rendered":"\n<p>I recently went through the processing of callback events for an in house API. The API required to validate that the events were sent by X, not by a third party. X generates signatures using a hash-based message authentication code (HMAC) with SHA-256 signatures. Those signatures then needed to be converted to base64.\u00a0Amazon S3 uses base64 strings for their hashes.\u00a0There are some good reasons to use base64 encoding. See\u00a0the stackOverflow question\u00a0<a href=\"http:\/\/stackoverflow.com\/a\/201510\/215502\">What is the use of base 64 encoding?<\/a><\/p>\n\n\n\n<p>Below are some simplified HMAC SHA 256 solutions. They should all output&nbsp;<code>qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc=<\/code>&nbsp;given the values of&nbsp;<code>secret<\/code>&nbsp;and&nbsp;<code>Message<\/code>. Take notice of the capital M. The hashed message is case sensitive.<\/p>\n\n\n\n<p>Jump to an implementation:<\/p>\n\n\n\n<ul><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#js\">Javascript<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#php\">PHP<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#java\">Java<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#groovy\">Groovy<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#csharp\">C#<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#objc\">Objective C<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#go\">Go<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#ruby\">Ruby<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#python2\">Python2<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#python3\">Python3<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#perl\">Perl<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#dart\">Dart<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#swift\">Swift<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#rust\">Rust<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#powershell\">Powershell<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#shell\">Shell<\/a><\/li><li><a href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages#delphi\">Delphi<\/a><\/li><\/ul>\n\n\n\n<h3>Javascript HMAC SHA256<\/h3>\n\n\n\n<p>Run the code online with this&nbsp;<a href=\"http:\/\/jsfiddle.net\/af9ps1yk\/6\/\">jsfiddle<\/a>. Dependent upon an open source js library called&nbsp;<a href=\"http:\/\/code.google.com\/p\/crypto-js\/\">http:\/\/code.google.com\/p\/crypto-js\/<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/crypto-js\/3.1.9-1\/crypto-js.min.js\"&gt;&lt;\/script&gt;\n&lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/crypto-js\/3.1.9-1\/hmac-sha256.min.js\"&gt;&lt;\/script&gt;\n&lt;script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/crypto-js\/3.1.9-1\/enc-base64.min.js\"&gt;&lt;\/script&gt;\n\n&lt;script&gt;\n  var hash = CryptoJS.HmacSHA256(\"Message\", \"secret\");\n  var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);\n  document.write(hashInBase64);\n&lt;\/script&gt;\n<\/code><\/pre>\n\n\n\n<h3>PHP HMAC SHA256<\/h3>\n\n\n\n<p>PHP has built in methods for&nbsp;<a href=\"http:\/\/php.net\/manual\/en\/function.hash-hmac.php\">hash_hmac<\/a>&nbsp;(PHP 5) and&nbsp;<a href=\"http:\/\/php.net\/manual\/en\/function.base64-encode.php\">base64_encode<\/a>&nbsp;(PHP 4, PHP 5) resulting in no outside dependencies. Say what you want about PHP but they have the cleanest code for this example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$s = hash_hmac('sha256', 'Message', 'secret', true);\necho base64_encode($s);\n<\/code><\/pre>\n\n\n\n<h3>Java HMAC SHA256<\/h3>\n\n\n\n<p>Dependent on&nbsp;<a href=\"http:\/\/commons.apache.org\/codec\/\">Apache Commons Codec<\/a>&nbsp;to encode in base64.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Base64;\n\npublic class ApiSecurityExample {\n  public static void main(String&#91;] args) {\n    try {\n     String secret = \"secret\";\n     String message = \"Message\";\n\n     Mac sha256_HMAC = Mac.getInstance(\"HmacSHA256\");\n     SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), \"HmacSHA256\");\n     sha256_HMAC.init(secret_key);\n\n     String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));\n     System.out.println(hash);\n    }\n    catch (Exception e){\n     System.out.println(\"Error\");\n    }\n   }\n}\n<\/code><\/pre>\n\n\n\n<h3>Groovy HMAC SHA256<\/h3>\n\n\n\n<p>It is mostly java code but there are some slight differences. Adapted from&nbsp;<a href=\"http:\/\/juliusgithaiga.blogspot.com\/2013\/06\/hmacsha256-representation.html\">Dev Takeout &#8211; Groovy HMAC\/SHA256 representation<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\n\ndef hmac_sha256(String secretKey, String data) {\n try {\n    Mac mac = Mac.getInstance(\"HmacSHA256\")\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), \"HmacSHA256\")\n    mac.init(secretKeySpec)\n    byte&#91;] digest = mac.doFinal(data.getBytes())\n    return digest\n   } catch (InvalidKeyException e) {\n    throw new RuntimeException(\"Invalid key exception while converting to HMac SHA256\")\n  }\n}\n\ndef hash = hmac_sha256(\"secret\", \"Message\")\nencodedData = hash.encodeBase64().toString()\nlog.info(encodedData)\n<\/code><\/pre>\n\n\n\n<h3>C# HMAC SHA256<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Security.Cryptography;\n\nnamespace Test\n{\n  public class MyHmac\n  {\n    private string CreateToken(string message, string secret)\n    {\n      secret = secret ?? \"\";\n      var encoding = new System.Text.ASCIIEncoding();\n      byte&#91;] keyByte = encoding.GetBytes(secret);\n      byte&#91;] messageBytes = encoding.GetBytes(message);\n      using (var hmacsha256 = new HMACSHA256(keyByte))\n      {\n        byte&#91;] hashmessage = hmacsha256.ComputeHash(messageBytes);\n        return Convert.ToBase64String(hashmessage);\n      }\n    }\n  }\n}\n<\/code><\/pre>\n\n\n\n<h3>Objective C and Cocoa HMAC SHA256<\/h3>\n\n\n\n<p>Most of the code required was for converting to bae64 and working the NSString and NSData data types.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>#import \"AppDelegate.h\"\n#import &lt;CommonCrypto\/CommonHMAC.h&gt;\n\n@implementation AppDelegate\n\n- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {\n NSString* key = @\"secret\";\n NSString* data = @\"Message\";\n\n const char *cKey = &#91;key cStringUsingEncoding:NSASCIIStringEncoding];\n const char *cData = &#91;data cStringUsingEncoding:NSASCIIStringEncoding];\n unsigned char cHMAC&#91;CC_SHA256_DIGEST_LENGTH];\n CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);\n NSData *hash = &#91;&#91;NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\n\n NSLog(@\"%@\", hash);\n\n NSString* s = &#91;AppDelegate base64forData:hash];\n NSLog(s);\n}\n\n+ (NSString*)base64forData:(NSData*)theData {\n const uint8_t* input = (const uint8_t*)&#91;theData bytes];\n NSInteger length = &#91;theData length];\n\n static char table&#91;] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=\";\n\n NSMutableData* data = &#91;NSMutableData dataWithLength:((length + 2) \/ 3) * 4];\n uint8_t* output = (uint8_t*)data.mutableBytes;\n\n NSInteger i;\n for (i=0; i &lt; length; i += 3) {\n NSInteger value = 0;\n NSInteger j;\n for (j = i; j &lt; (i + 3); j++) {\n value &lt;&lt;= 8;\n\n if (j &lt; length) {  value |= (0xFF &amp; input&#91;j]);  }  }  NSInteger theIndex = (i \/ 3) * 4;  output&#91;theIndex + 0] = table&#91;(value &gt;&gt; 18) &amp; 0x3F];\n output&#91;theIndex + 1] = table&#91;(value &gt;&gt; 12) &amp; 0x3F];\n output&#91;theIndex + 2] = (i + 1) &lt; length ? table&#91;(value &gt;&gt; 6) &amp; 0x3F] : '=';\n output&#91;theIndex + 3] = (i + 2) &lt; length ? table&#91;(value &gt;&gt; 0) &amp; 0x3F] : '=';\n }\n\n return &#91;&#91;NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]; }\n\n@end\n<\/code><\/pre>\n\n\n\n<h3>Go programming language &#8211; Golang HMAC SHA256<\/h3>\n\n\n\n<ul><li><a href=\"http:\/\/play.golang.org\/p\/iTmI0RUCkD\">Try it online in your browser with Play GoLang<\/a><\/li><li><a href=\"http:\/\/golang.org\/pkg\/crypto\/hmac\/\">crypto\/hmac package<\/a><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>package main\n\nimport (\n    \"crypto\/hmac\"\n    \"crypto\/sha256\"\n    \"encoding\/base64\"\n    \"fmt\"\n)\n\nfunc ComputeHmac256(message string, secret string) string {\n    key := &#91;]byte(secret)\n    h := hmac.New(sha256.New, key)\n    h.Write(&#91;]byte(message))\n    return base64.StdEncoding.EncodeToString(h.Sum(nil))\n}\n\nfunc main() {\n    fmt.Println(ComputeHmac256(\"Message\", \"secret\"))\n}\n<\/code><\/pre>\n\n\n\n<h3>Ruby HMAC SHA256<\/h3>\n\n\n\n<p>Requires&nbsp;<a href=\"http:\/\/www.ruby-doc.org\/stdlib-1.9.3\/libdoc\/openssl\/rdoc\/OpenSSL.html\">openssl<\/a>&nbsp;and&nbsp;<a href=\"http:\/\/ruby-doc.org\/stdlib-2.0\/libdoc\/base64\/rdoc\/Base64.html\">base64<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'openssl'\nrequire \"base64\"\n\nhash  = OpenSSL::HMAC.digest('sha256', \"secret\", \"Message\")\nputs Base64.encode64(hash)\n<\/code><\/pre>\n\n\n\n<h3>Python (2.7) HMAC SHA256<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import hashlib\nimport hmac\nimport base64\n\nmessage = bytes(\"Message\").encode('utf-8')\nsecret = bytes(\"secret\").encode('utf-8')\n\nsignature = base64.b64encode(hmac.new(secret, message, digestmod=hashlib.sha256).digest())\nprint(signature)\n<\/code><\/pre>\n\n\n\n<p>Tested with Python 2.7.6. Also, be sure not to name your python demo script the same as one of the imported libraries.<\/p>\n\n\n\n<h3>Python (3.7) HMAC SHA256<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import hashlib\nimport hmac\nimport base64\n\nmessage = bytes('Message', 'utf-8')\nsecret = bytes('secret', 'utf-8')\n\nsignature = base64.b64encode(hmac.new(secret, message, digestmod=hashlib.sha256).digest())\nprint(signature)\n<\/code><\/pre>\n\n\n\n<p>Tested with Python 3.7.0. Also, be sure not to name your python demo script the same as one of the imported libraries. Thanks to&nbsp;<a href=\"https:\/\/github.com\/biswapanda\">@biswapanda<\/a>.<\/p>\n\n\n\n<h3>Perl HMAC SHA256<\/h3>\n\n\n\n<p>See&nbsp;<a href=\"http:\/\/search.cpan.org\/~mshelor\/Digest-SHA-5.85\/lib\/Digest\/SHA.pm\">Digest::SHA documentation<\/a>. By convention, the Digest modules do not pad their Base64 output. To fix this you can test the length of the hash and append equal signs &#8220;=&#8221; until it is the length is a multiple of 4. We will use a modulus function below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>use Digest::SHA qw(hmac_sha256_base64);\n$digest = hmac_sha256_base64(\"Message\", \"secret\");\n\n# digest is currently: qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc\n\n# Fix padding of Base64 digests\nwhile (length($digest) % 4) {\n    $digest .= '=';\n}\n\nprint $digest;\n# digest is now: qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc=\n<\/code><\/pre>\n\n\n\n<h3>Dart HMAC SHA256<\/h3>\n\n\n\n<p>Dependent upon the Dart&nbsp;<a href=\"https:\/\/api.dartlang.org\/docs\/channels\/stable\/latest\/crypto.html\">crypto package<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:html';\nimport 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\nvoid main() {\n\n  String secret = 'secret';\n  String message = 'Message';\n\n  List&lt;int&gt; secretBytes = UTF8.encode('secret');\n  List&lt;int&gt; messageBytes = UTF8.encode('Message');\n\n  var hmac = new HMAC(new SHA256(), secretBytes);\n  hmac.add(messageBytes);\n  var digest = hmac.close();\n\n  var hash = CryptoUtils.bytesToBase64(digest);\n\n  \/\/ output to html page\n  querySelector('#hash').text = hash;\n  \/\/ hash =&gt; qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc=\n}\n<\/code><\/pre>\n\n\n\n<h3>Swift HMAC SHA256<\/h3>\n\n\n\n<p>I have not verified but see this&nbsp;<a href=\"http:\/\/stackoverflow.com\/questions\/24099520\/commonhmac-in-swift\">stackOverflow post<\/a><\/p>\n\n\n\n<h3>Rust<\/h3>\n\n\n\n<p>Take a look at the&nbsp;<a href=\"https:\/\/github.com\/alco\/rust-digest\/blob\/master\/hmac.rs\">alco\/rust-digest<\/a>&nbsp;repository for&nbsp;<a href=\"http:\/\/www.rust-lang.org\/\">Rust (lang)<\/a>&nbsp;guidance. I have not verified yet.<\/p>\n\n\n\n<h3>Powershell (Windows) HMAC SHA256<\/h3>\n\n\n\n<p>Mostly wrapping of .NET libraries but useful to see it in powershell&#8217;s befuddling syntax. See code as&nbsp;<a href=\"https:\/\/gist.github.com\/jokecamp\/2c1a67b8f277797ecdb3\">gist<\/a><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$message = 'Message'\n$secret = 'secret'\n\n$hmacsha = New-Object System.Security.Cryptography.HMACSHA256\n$hmacsha.key = &#91;Text.Encoding]::ASCII.GetBytes($secret)\n$signature = $hmacsha.ComputeHash(&#91;Text.Encoding]::ASCII.GetBytes($message))\n$signature = &#91;Convert]::ToBase64String($signature)\n\necho $signature\n\n# Do we get the expected signature?\necho ($signature -eq 'qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc=')\n<\/code><\/pre>\n\n\n\n<h3>Shell (Bash etc) HMAC SHA256<\/h3>\n\n\n\n<p>Using openssl. Credit to&nbsp;<a href=\"https:\/\/github.com\/CzechJiri\">@CzechJiri<\/a><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>MESSAGE=\"Message\"\nSECRET=\"secret\"\n\necho -n $MESSAGE | openssl dgst -sha256 -hmac $SECRET -binary | base64\n<\/code><\/pre>\n\n\n\n<h3>###&nbsp;Delphi HMAC SHA256<\/h3>\n\n\n\n<p><a href=\"https:\/\/stackoverflow.com\/a\/40182566\/215502\">https:\/\/stackoverflow.com\/a\/40182566\/215502<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>I recently went through the processing of callback events for an in house API. The API required to validate that the events were sent by X, not by a third party. X generates signatures using a hash-based message authentication code (HMAC) with SHA-256 signatures. Those signatures then needed to be converted to base64.\u00a0Amazon S3 uses &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to\/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages\/\"> <span class=\"screen-reader-text\">Examples of creating base64 hashes using HMAC SHA256 in different languages<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[13],"tags":[8,103,104,105,106,107,108,109,110,102,111,112,113,114,115,116,118,117],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/940"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=940"}],"version-history":[{"count":3,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/940\/revisions"}],"predecessor-version":[{"id":945,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/940\/revisions\/945"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=940"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=940"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=940"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}