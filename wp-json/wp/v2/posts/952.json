{"id":952,"date":"2023-01-10T13:08:27","date_gmt":"2023-01-10T07:38:27","guid":{"rendered":"https:\/\/vinayaroratech.com\/?p=952"},"modified":"2023-01-10T22:27:39","modified_gmt":"2023-01-10T16:57:39","slug":"how-to-visualize-net-core-api-usage-with-prometheus-and-grafana-net-6","status":"publish","type":"post","link":"https:\/\/vinayaroratech.com\/dotnet\/how-to-visualize-net-core-api-usage-with-prometheus-and-grafana-net-6\/","title":{"rendered":"How to visualize .NET Core API usage with Prometheus and Grafana (.NET 6)"},"content":{"rendered":"\n<p>If you like me would like to know about the usage of your API and take actions based on raw data, then you for sure would like to track and visualize API usage. Some great things you also would be capable of doing are charging a customer based on the number of API calls made against the backend or you would like to get actionable insights on the popularity of a certain API.<\/p>\n\n\n\n<p>In this tutorial, I will be teaching you how to get up and running with Prometheus and Grafana in a few minutes using Docker. Then we will take a look at how we can implement Prometheus in .NET Core to track the API usage.<\/p>\n\n\n\n<p>If you are ready, then let\u2019s get going.<\/p>\n\n\n\n<h2 id=\"getting-up-and-running-with-prometheus-and-grafana\">Getting up and running with Prometheus and Grafana<\/h2>\n\n\n\n<p>As described above I will be using Docker to run two containers with Prometheus and Grafana. Below is a docker-compose file, that will set up the two required containers for you.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>version: \"3.7\"\n\nservices:\n  prometheus:\n    image: prom\/prometheus\n    container_name: dev_prometheus_test\n    restart: always\n    ports:\n      - 30090:9090\n    environment:\n      - TZ=UTC\n    volumes:\n      - .\/prom\/prometheus.yml:\/etc\/prometheus\/prometheus.yml\n    networks:\n      - dotnetcorepromgrafana\n\n  grafana:\n    image: grafana\/grafana\n    container_name: dev_grafana_test\n    #command:\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=P@ssw0rd\n    restart: always\n    ports:\n      - \"30091:3000\"\n    volumes:\n      - .\/grafana-data\/data:\/var\/lib\/grafana\n    networks:\n      - dotnetcorepromgrafana\n    \n  \n### put all the networks here\nnetworks:\n  dotnetcorepromgrafana:<\/code><\/pre>\n\n\n\n<p>An explanation of the above:<\/p>\n\n\n\n<ul><li>First we specify a version for the compose file.<\/li><li>Then we specify the services<\/li><li><strong>Prometheus<\/strong>&nbsp;\u2013 The image is&nbsp;<a href=\"https:\/\/hub.docker.com\/r\/ubuntu\/prometheus\" rel=\"noreferrer noopener\" target=\"_blank\">ubuntu\/prometheus<\/a>&nbsp;and is named&nbsp;<code>dev_prometheus_test<\/code>, you are free to name it whatever you want. Then we populate it on port&nbsp;<code>30090<\/code>, set the timezone to be Copenhagen (I\u2019m from Denmark). Here is a&nbsp;<a href=\"https:\/\/en.wikipedia.org\/wiki\/List_of_tz_database_time_zones\" rel=\"noreferrer noopener\" target=\"_blank\">list of tz time zones<\/a>&nbsp;and then we mount the configuration for prometheus to be at&nbsp;<code>\/prom\/prometheus.yml<\/code>.<\/li><li><strong>Grafana<\/strong>&nbsp;\u2013 The image is&nbsp;<a href=\"https:\/\/hub.docker.com\/r\/grafana\/grafana\" rel=\"noreferrer noopener\" target=\"_blank\">grafana\/grafana<\/a>&nbsp;and is named&nbsp;<code>dev_grafana_test<\/code>, you can also change them name of this one, if you want to. It\u2019s populated on port&nbsp;<code>30091<\/code>&nbsp;and the data for grafana is mounted to&nbsp;<code>\/grafana\/data<\/code>.<\/li><\/ul>\n\n\n\n<p>As you might have noticed, we need a configuration file for Prometheus to run. We have told the compose file that it has been mounted inside&nbsp;<code>\/prom\/<\/code>&nbsp;of the root directory, so let\u2019s go ahead and make that file. Below is the YAML code needed to scrape metrics from the API we will be creating in minutes.<\/p>\n\n\n\n<h3 id=\"create-prometheus-configuration\">Create Prometheus Configuration<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>global:\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  evaluation_interval: 15s\nalerting:\n  alertmanagers:\n  - scheme: http\n    timeout: 10s\n    api_version: v1\n    static_configs:\n    - targets: &#91;]\nscrape_configs:\n- job_name: TrackApiUsage\n  honor_timestamps: <strong>true<\/strong>\n  scrape_interval: 15s  \n  scrape_timeout: 10s  \n  metrics_path: \/metrics  \n  scheme: https  \n  static_configs:  \n  - targets:  \n    - host.docker.internal:5001<\/code><\/pre>\n\n\n\n<p>You should now have a root folder named something like TrackApiUsage and inside that folder, you got two sub-folders named prom and grafana and inside grafana you got another one named data. Below is a more graphical representation of the directories and files:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>TrackApiUsage\n|   docker-compose.yml\n|   \n+---grafana-data\n|   \\---data\n\\---prom\n        prometheus.yml<\/code><\/pre>\n\n\n\n<p>Alright \u2013 so far so good. Let\u2019s get the two containers created and spun up. Open cmd inside the root directory and enter the following command to get started. (Please remember that you need to have&nbsp;<a href=\"https:\/\/www.docker.com\/products\/docker-desktop\" rel=\"noreferrer noopener\" target=\"_blank\">Docker Desktop<\/a>&nbsp;installed on your computer).<\/p>\n\n\n\n<h3 id=\"pull-and-run-the-containers\">Pull and run the containers<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker-compose up -d<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Docker-Compose-API-Tracking-Containers.gif\" alt=\"Docker Compose up for Prometheus and Grafana\"\/><figcaption>Docker Compose up for Prometheus and Grafana<\/figcaption><\/figure>\n\n\n\n<p>If you go and take a look inside the Docker Desktop application, you can see our two new containers would be listed and running.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Docker-Desktop-Api-Tracking-Containers.png\" alt=\"Docker Desktop Containers\"\/><figcaption>Docker Desktop Containers<\/figcaption><\/figure>\n\n\n\n<p>If we take a look inside the directories, we would also see that some new folders and files have been automatically created by the containers.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>TrackApiUsage\n|   docker-compose.yml\n|   tree.txt\n|   \n+---grafana-data\n|   \\---data\n|       |   grafana.db\n|       |   \n|       +---alerting\n|       |   \\---1\n|       |           __default__.tmpl\n|       |           \n|       +---csv\n|       +---plugins\n|       \\---png\n\\---prom\n        prometheus.yml<\/code><\/pre>\n\n\n\n<p>Both containers are running on localhost and can be accessed at their representative ports. If you click the links below, they would take you to the applications on your local computer.<\/p>\n\n\n\n<ul><li>Prometheus \u2013&gt;&nbsp;<a href=\"http:\/\/localhost:30090\/\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:30090<\/a><\/li><li>Grafana \u2013&gt;&nbsp;<a href=\"http:\/\/localhost:30091\/\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:30091<\/a><\/li><\/ul>\n\n\n\n<p>The metrics collector and graphical representation of them are now in place, but we got no data so far as we don\u2019t have an API exposed on port 5001. Let\u2019s go ahead and make that.<\/p>\n\n\n\n<h2 id=\"create-a-sample-net-core-api-in-5-minutes\">Create a sample .NET Core API in 5 minutes<\/h2>\n\n\n\n<p>Go to your root directory and open cmd inside that directory and enter the following line to create a new Sample API based on a template.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Create-Dotnet-Web-Api-From-Cmd.gif\" alt=\"Create new .NET Core Web Api from CMD\"\/><figcaption>Create new .NET Core Web Api from CMD<\/figcaption><\/figure>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet new webapi -o SampleApi<\/code><\/pre>\n\n\n\n<p>By default, a random port will be specified for the API. We need to change that in order to make Prometheus grab the metrics exposed by the API. Navigate to&nbsp;<code>\\TrackApiUsage\\SampleApi\\Properties<\/code>&nbsp;and edit&nbsp;<code>launchSettings.json<\/code>&nbsp;in&nbsp;<a href=\"https:\/\/code.visualstudio.com\/\" rel=\"noreferrer noopener\" target=\"_blank\">Visual Studio Code<\/a>&nbsp;or something similar.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  \"$schema\": \"https:\/\/json.schemastore.org\/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http:\/\/localhost:5000\",\n      \"sslPort\": 44353\n    }\n  },\n  \"profiles\": {\n    \"SampleApi\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http:\/\/localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}<\/code><\/pre>\n\n\n\n<p>In line 17 I have updated the \u201c<strong>applicationUrl<\/strong>\u201d to be running at&nbsp;<code>http:\/\/localhost:5000<\/code>&nbsp;instead of the randomly assigned port.<\/p>\n\n\n\n<h3 id=\"update-programcs-to-not-redirect-to-https-url-only-for-demo-purposes\">Update program.cs to not redirect to https url. (Only for demo purposes)<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>using Prometheus;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n\/\/ Add services to the container.\n\nbuilder.Services.AddControllers();\n\/\/ Learn more about configuring Swagger\/OpenAPI at https:\/\/aka.ms\/aspnetcore\/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n\/\/ Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();<\/code><\/pre>\n\n\n\n<h3 id=\"run-the-api\">Run the API<\/h3>\n\n\n\n<p>Let\u2019s boot up the API and confirm that it\u2019s running at port&nbsp;<code>5000<\/code>&nbsp;as we just changed it to. Go to the SampleApi folder and enter the following command to run the API inside the console.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Run-Dotnet-Web-Api-From-Cmd.gif\" alt=\"Run API from CMD\"\/><figcaption>Run API from CMD<\/figcaption><\/figure>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet run<\/code><\/pre>\n\n\n\n<p>Awesome! The API is running on port&nbsp;<code>5000<\/code>.<\/p>\n\n\n\n<h3 id=\"implement-prometheus-in-net-core-api\">Implement Prometheus in .NET Core API<\/h3>\n\n\n\n<p>Open a cmd window inside the SampleApi folder and install the&nbsp;<a href=\"https:\/\/www.nuget.org\/packages\/prometheus-net.AspNetCore\/\" rel=\"noreferrer noopener\" target=\"_blank\">Prometheus package<\/a>&nbsp;inside the project.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Install-Prometheus-Package-Dot-Net-Core.gif\" alt=\"Install Prometheus Package in project\"\/><figcaption>Install Prometheus Package in project<\/figcaption><\/figure>\n\n\n\n<pre class=\"wp-block-code\"><code>dotnet add package prometheus-net.AspNetCore<\/code><\/pre>\n\n\n\n<p>Now that we got the required dependency in place, let\u2019s go ahead and add the required lines of code to our&nbsp;<code>program.cs<\/code>&nbsp;inside&nbsp;<code>SampleApi<\/code>.<\/p>\n\n\n\n<h4 id=\"add-prometheus-to-programcs-and-start-exposing-metrics\">Add Prometheus to program.cs and start exposing metrics<\/h4>\n\n\n\n<p>Inside&nbsp;<code>program.cs<\/code>&nbsp;add the following lines of code, that I have added on lines 21, 22, and 28:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>using Prometheus;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n\/\/ Add services to the container.\n\nbuilder.Services.AddControllers();\n\/\/ Learn more about configuring Swagger\/OpenAPI at https:\/\/aka.ms\/aspnetcore\/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n\/\/ Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseRouting();\napp.UseHttpMetrics();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.MapMetrics();\n\napp.Run();<\/code><\/pre>\n\n\n\n<p>Let\u2019s build and run the API one more time and verify that the metrics are being generated. Go to&nbsp;<a href=\"http:\/\/localhost:5000\/metrics\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:5000\/metrics<\/a>&nbsp;and check that the metrics data are there, like below:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/dot-net-metrics-for-prometheus.png\" alt=\"Metrics generated by API\"\/><figcaption>Metrics generated by API<\/figcaption><\/figure>\n\n\n\n<p>Let\u2019s also verify that Prometheus can see our endpoint and the data. Go to&nbsp;<a href=\"http:\/\/localhost:30090\/targets\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:30090\/targets<\/a>&nbsp;and check if the endpoint is up.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Prometheus-Endpoint-Up-For-Web-Api.png\" alt=\"Prometheus Targets\"\/><figcaption>Prometheus Targets<\/figcaption><\/figure>\n\n\n\n<p>Great! It\u2019s up and running and Prometheus is capable of seeing it. Now let\u2019s generate some test data for it that will be shown inside Grafana.<\/p>\n\n\n\n<h2 id=\"use-swagger-to-create-some-metrics-for-grafana\">Use Swagger to create some metrics for Grafana<\/h2>\n\n\n\n<p>The API template we just generated with the console comes with built-in support for&nbsp;<a href=\"https:\/\/swagger.io\/\" rel=\"noreferrer noopener\" target=\"_blank\">Swagger<\/a>. This gives us an easy way to test the built-in Weather API endpoint in our application. Navigate to&nbsp;<a href=\"http:\/\/localhost:5000\/swagger\/index.html\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:5000\/swagger\/index.html<\/a>&nbsp;and try out the weather endpoint.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Test-Swagger-Weather-Endpoint.gif\" alt=\"Test endpint using Swagger\"\/><figcaption>Test endpoint using Swagger<\/figcaption><\/figure>\n\n\n\n<h3 id=\"verify-newly-generated-metrics-by-endpoint\">Verify newly generated metrics by endpoint<\/h3>\n\n\n\n<p>If you navigate to http:\/\/localhost:5000\/metrics you should now be able to see that metrics for the request have been generated. Just like below, where I have marked the metrics:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/metrics-result-by-testing-weather-api-endpoint.png\" alt=\"Newly generated metrics for Prometheus\"\/><figcaption>Newly generated metrics for Prometheus<\/figcaption><\/figure>\n\n\n\n<p>We can also verify that Prometheus has picked up our metrics and processed them. Navigate to&nbsp;<a href=\"http:\/\/localhost:30090\/graph\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:30090\/graph<\/a>&nbsp;and select the tab named&nbsp;<code>Graph<\/code>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Prometheus-Graph-Test-For-Endpoint.png\" alt=\"Prometheus Graph\"\/><figcaption>Prometheus Graph<\/figcaption><\/figure>\n\n\n\n<p>By default, no&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\">query<\/a>&nbsp;has been entered in the Graph panel. You have to enter&nbsp;<code>http_requests_received_total<\/code>&nbsp;to get the total amount of requests we just made and adjust the timeframe to be&nbsp;<code>5m<\/code>&nbsp;instead of&nbsp;<code>1h<\/code>.<\/p>\n\n\n\n<p>As you can see above, the data has been transformed into a graph. With that in place, let\u2019s move on to the configuration of Grafana.<\/p>\n\n\n\n<h2 id=\"configure-grafana-to-visualize-api-usage\">Configure Grafana to visualize API usage<\/h2>\n\n\n\n<p>Start off by navigating to http:\/\/localhost:30091 and log in using changed login credentials for Grafana:<\/p>\n\n\n\n<ul><li><strong>Username<\/strong>&nbsp;\u2013&gt; admin<\/li><li><strong>Password<\/strong>&nbsp;\u2013&gt; P@ssw0rd<\/li><\/ul>\n\n\n\n<p>You might have to configure a new password for the user. Please use an easy one, as this is just a demo. If you are doing this for a production environment, then pick a strong one or you can change the default password in docker-compose like we did.<\/p>\n\n\n\n<h3 id=\"add-prometheus-as-a-new-data-source\">Add Prometheus as a new data source<\/h3>\n\n\n\n<p>Hover your mouse at the&nbsp;<code>gear icon<\/code>&nbsp;in the left menu and select&nbsp;<code>Data sources<\/code>. This will open a new page, where you can add a new data source. Fill the fields, as I have done below:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Configure-Prometheus-Data-Source-Grafana.gif\" alt=\"Add new data source in Grafana for Prometheus\"\/><figcaption>Add new data source in Grafana for Prometheus<\/figcaption><\/figure>\n\n\n\n<p>The URL you have to use is:&nbsp;<code>http:\/\/host.docker.internal:30090<\/code>.<\/p>\n\n\n\n<p>With the new data source in place, let\u2019s add a new dashboard and add a new panel where we can add the query parameters.<\/p>\n\n\n\n<p>Below is a video teaching you how to add a new dashboard and query the same data as we did earlier in Prometheus:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/Add-New-Dashboard-And-Query-Prometheus.gif\" alt=\"Add new Dashboard and Query Prometheus\"\/><figcaption>Add a new Dashboard and Query Prometheus<\/figcaption><\/figure>\n\n\n\n<p>The query I entered to retrieve the same data as in Prometheus is:&nbsp;<code>rate<\/code><strong><code>(<\/code><\/strong><code>http_requests_received_total<\/code><strong><code>[<\/code><\/strong><code>15m<\/code><strong><code>])<\/code><\/strong>. By adding&nbsp;<code>15min<\/code>&nbsp;the end as a parameter, we can get data only for the past 15 minutes.<\/p>\n\n\n\n<p>Remember to save the dashboard when you are done.<\/p>\n\n\n\n<p>And there you have it \u2013 a Grafana Dashboard showing you metrics from your .NET Core Web API \u2013 how cool is that?<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.christian-schou.dk\/content\/images\/2022\/09\/API-Metrics-In-Grafana.png\" alt=\"Grafana Panel showing API metrics\"\/><figcaption>Grafana Panel showing API metrics<\/figcaption><\/figure>\n\n\n\n<h1 id=\"1031\">Setting Up Grafana Dashboards<\/h1>\n\n\n\n<p id=\"0e21\">Now go to the&nbsp;<a href=\"http:\/\/localhost:3000\/login\" rel=\"noreferrer noopener\" target=\"_blank\">http:\/\/localhost:3000\/<\/a>&nbsp;URL and you get the login prompt for Grafana. Use the \u2018admin\u2019 login and then the password that is in the&nbsp;<a href=\"https:\/\/github.com\/Cingulara\/dotnet-core-prometheus-grafana\/blob\/master\/docker-compose.yml\" rel=\"noreferrer noopener\" target=\"_blank\">docker-compose file<\/a>&nbsp;in my repo and log in. Once you login you get a page ready to setup your first dashboard.<\/p>\n\n\n\n<p id=\"b89c\">Click the Add data source highlighted icon and we will point to our Prometheus setup. On the Add data source page, choose Prometheus (usually the top listing) and fill in the Name field with whatever you want that makes sense. The URL needs to be&nbsp;<a rel=\"noreferrer noopener\" href=\"http:\/\/prometheus:9090\/\" target=\"_blank\">http:\/\/prometheus:9090\/<\/a>&nbsp;and leave the rest alone. Click Save &amp; Test at the bottom to make sure it all works. If it does, you see a Green bar along the bottom telling you so. Then select the Back button.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"707\" src=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1024x707.png\" alt=\"\" class=\"wp-image-955\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1024x707.png 1024w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-300x207.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-768x530.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1536x1060.png 1536w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-2048x1413.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"745\" src=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-1024x745.png\" alt=\"\" class=\"wp-image-957\" srcset=\"https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-1024x745.png 1024w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-300x218.png 300w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-768x559.png 768w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-1536x1118.png 1536w, https:\/\/vinayaroratech.com\/wp-content\/uploads\/2023\/01\/image-1-2048x1491.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p id=\"9cb4\">Now click the + icon in the far left top area of the Grafana menu and choose Import on the popup menu. This will allow you to import a pre-made dashboard for you to show .NET Core metrics. On the next screen enter&nbsp;<strong><em>10427<\/em><\/strong>&nbsp;to use a dashboard from Ahmad Chehre in the&nbsp;<a href=\"https:\/\/grafana.com\/grafana\/dashboards\/10427\" rel=\"noreferrer noopener\" target=\"_blank\">available Grafana Dashboards online<\/a>.<\/p>\n\n\n\n<p id=\"d785\">Click Load and then enter a dashboard name you want in the Name field. Click in the Prometheus field and choose the Prometheus data source you just made. Click the Import button and you should get a screen similar to below. Remember we called our APIs earlier to feed your system metric data. There is your data!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/miro.medium.com\/max\/1400\/1*kFWHwYInmAvONVk9OfFzrQ.png\" alt=\"\"\/><figcaption>Your new Grafana dashboard showing .NET Core default metrics<\/figcaption><\/figure>\n\n\n\n<p id=\"373b\">You can remove the top right graph if you wish (I do). And then in the top right of the overall Grafana page change the timeframe to view (15 minutes, 30 minutes, etc. ) as well as a refresh rate.<\/p>\n\n\n\n<p id=\"b683\">Repeat the steps we just went through on importing a second dashboard but use&nbsp;<strong><em>10915<\/em><\/strong>&nbsp;as the ID from&nbsp;<a href=\"https:\/\/grafana.com\/grafana\/dashboards\/10915\" rel=\"noreferrer noopener\" target=\"_blank\">this dashboard<\/a>&nbsp;created by sandersaares. Choose the Prometheus data source again and specify a good name. Save that dashboard and let it load.<\/p>\n\n\n\n<p id=\"a9d5\">This shows requests received by API controllers as well as errors and request duration. As with any of the Grafana dashboards you can always edit, modify or add sections to data points. But these two will get you started. Get used to Prometheus Query Language and have at it!<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/miro.medium.com\/max\/1400\/1*gmwLmcjR6RB_Qfp4X7CDGg.png\" alt=\"\"\/><figcaption>Your new Grafana dashboard showing .NET Web API Controller metrics<\/figcaption><\/figure>\n\n\n\n<h2 id=\"summary\">Summary<\/h2>\n\n\n\n<p>In this tutorial, you learned how to create a docker-compose file in order to get Prometheus and Grafana up and running. You also learned how to mount data inside the application to a drive on the computer \u2013 this is good if you like us have something you want to persist that should not be changed on updated etc.<\/p>\n\n\n\n<p>You also learned how to create a .NET Core Web API using a template from the Command Line Interface (CLI \/ CMD) and how to change the startup properties to avoid HTTPS and specify a specific port.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>If you like me would like to know about the usage of your API and take actions based on raw data, then you for sure would like to track and visualize API usage. Some great things you also would be capable of doing are charging a customer based on the number of API calls made &hellip;<\/p>\n<p class=\"read-more\"> <a class=\"\" href=\"https:\/\/vinayaroratech.com\/dotnet\/how-to-visualize-net-core-api-usage-with-prometheus-and-grafana-net-6\/\"> <span class=\"screen-reader-text\">How to visualize .NET Core API usage with Prometheus and Grafana (.NET 6)<\/span> Read More &raquo;<\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[81,127,126],"_links":{"self":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/952"}],"collection":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/comments?post=952"}],"version-history":[{"count":6,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/952\/revisions"}],"predecessor-version":[{"id":967,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/posts\/952\/revisions\/967"}],"wp:attachment":[{"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/media?parent=952"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/categories?post=952"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/vinayaroratech.com\/wp-json\/wp\/v2\/tags?post=952"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}